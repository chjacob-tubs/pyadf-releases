import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

###################################################################
#
# PyADF test ADFPlot_LocorbPotentials
#
# Test calculation of potentials for localized orbitals
#
# Test by Christoph Jacob, ETH Zurich and KIT, 2009-2010
#
###################################################################

h2o = molecule(os.path.join(pyadfenv.outdir, 'H2O.xyz'))

settings = adfsettings()
settings.set_save_tapes([21, 10])
settings.set_lmo(True)
settings.set_integration(4.0)

results = adfsinglepointjob(h2o, 'SZ', settings=settings).run()

cgrid = cubegrid(results.get_molecule(), spacing=0.1)
agrid = adfgrid(results)

##########################################
# localized orbital kinectic potential
##########################################

pot_kin_tot = results.get_kinetic_potential(grid=cgrid, func='PW91k')
pot_kin_loc = results.get_kinetic_potential(grid=cgrid, func='PW91k', orbs={'Loc': [1, 2, 3, 4, 5]})

diff_pot = pot_kin_tot - pot_kin_loc

int_diff = diff_pot.integral(func=lambda x: abs(x))
print("Integral of difference in kinetic potentials", int_diff)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_diff, 0.0, 6)

##########################################
# localized orbital xc potential
##########################################

pot_xc_tot = results.get_potential(grid=cgrid, pot='XC')
pot_xc_loc = results.get_potential(grid=cgrid, pot='XC', orbs={'Loc': [1, 2, 3, 4, 5]})

diff_pot = pot_xc_tot - pot_xc_loc

int_diff = diff_pot.integral(func=lambda x: abs(x))
print("Integral of difference in XC potentials", int_diff)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_diff, 0.0, 6)

##########################################
# localized orbital Coulomb potential
##########################################

pot_coul_tot = results.get_potential(grid=cgrid, pot='Coul')
pot_coul_loc = results.get_potential(grid=cgrid, pot='Coul', orbs={'Loc': [1, 2, 3, 4, 5]})

diff_pot = pot_coul_tot - pot_coul_loc

int_diff = diff_pot.integral(func=lambda x: abs(x))
print("Integral of difference in Coulomb potentials", int_diff)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_diff, 0.0, 6)

pot_coul_loc1 = results.get_potential(grid=cgrid, pot='Coul', orbs={'Loc': [1, 2]})
pot_coul_loc2 = results.get_potential(grid=cgrid, pot='Coul', orbs={'Loc': [3, 4, 5]})
pot_coul_loc = pot_coul_loc1 + pot_coul_loc2

diff_pot = pot_coul_tot - pot_coul_loc

int_diff = diff_pot.integral(func=lambda x: abs(x))
print("Integral of difference in Coulomb potentials", int_diff)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_diff, 0.0, 6)

pot_coul_loc = results.get_potential(grid=cgrid, pot='Coul', orbs={'Loc': [3, 4, 5]})
pot_coul_loc_numint = results.get_locorb_coulpot_numint(grid=cgrid, orbs=[3, 4, 5])

diff_pot = pot_coul_loc - pot_coul_loc_numint

dens = results.get_density(grid=cgrid, orbs={'Loc': [3, 4, 5]})

int_diff = (diff_pot * dens).integral(func=lambda x: abs(x))
print("Density-weighted integral of difference in Coulomb potentials", int_diff)

if 'unittesting' in pyadfenv.options:
    testobj.assert_(int_diff < 0.071)
