import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

import numpy as np

mol = molecule(os.path.join(pyadfenv.outdir, 'water.xyz'))

# first, we do a Turbomole geometry optimization

settings = TurbomoleGeometryOptimizationSettings(verbose_level=2)
settings.set_scfconv(8)
settings.set_convergence_criterion(5)

settings.set_basis_set('def2-SVP')

res = TurbomoleGeometryOptimizationJob(mol, method='hf', settings=settings).run()

opt_mol = res.get_molecule()
opt_mol.write(os.path.join(pyadfenv.outdir, 'water_opt.xyz'))

opt_energy = res.get_energy()
print("Final Total Energy: ", opt_energy)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(opt_energy, -75.961338, 5)

    ref_mol = molecule(os.path.join(pyadfenv.outdir, 'water_ref.xyz'))
    testobj.assertAlmostEqualMolecules(opt_mol, ref_mol)

# now for the SNF part

snf_res = SNFJob(res).run()
freqs = snf_res.get_wave_numbers()
ints = snf_res.get_ir_ints()

modes_mw = snf_res.get_vibs().modes.modes_mw

print("Vibrational frequencies [cm-1]: ", freqs)
print("IR intensities: ", ints)
print("Normal Modes: ", modes_mw)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(freqs, [1750.82069, 4149.71742, 4245.99448], 2)
    testobj.assertAlmostEqual(ints, [82.998243, 27.239161, 75.462097], 2)

    modes_mw_orig = np.array([[0.22030074, 0.0, 0.15578052, -0.68017228, 0.0, 0.0310401,
                               -0.19746066, 0.0, -0.65162219],
                              [0.16159043, 0.0, 0.1140503, 0.00761002, 0.0, -0.69266182,
                               -0.65134171, 0.0, 0.23832063],
                              [-0.15654066, 0.0, 0.22159093, -0.02576011, 0.0, -0.68054285,
                               0.64937272, 0.0, -0.20225085]])
    overlap = np.dot(modes_mw, modes_mw_orig.T)

    testobj.assertAlmostEqual(np.abs(overlap.diagonal()), np.ones(3), 4)
