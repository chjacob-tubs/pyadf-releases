file_h2o_1 = os.path.join(pyadfenv.outdir, 'FDE-H2O-1.xyz')
file_h2o_2 = os.path.join(pyadfenv.outdir, 'FDE-H2O-2.xyz')
file_mol = os.path.join(pyadfenv.outdir, 'FDE-mol.xyz')

m_h2o_1 = molecule(file_h2o_1)
m_h2o_2 = molecule(file_h2o_2)
m_mol = molecule(file_mol)

m_tot = m_mol + m_h2o_1 + m_h2o_2

print m_tot.print_coordinates()

# Prepare first water molecule
r_h2o_1 = adfsinglepointjob(m_h2o_1, 'SZ', options=['NOSYMFIT']).run()

# Prepare second water molecule
r_h2o_2 = adfsinglepointjob(m_h2o_2, 'SZ', options=['NOSYMFIT']).run()

# run supermolecule calculation

# save TAPE10 for later use of the integration grid
settings = adfsettings()
settings.set_save_tapes([21, 10])

# run FDE calculation
frags = [fragment(r_h2o_1, [m_h2o_1], isfrozen=True),
         fragment(r_h2o_2, [m_h2o_2], isfrozen=True),
         fragment(None, [m_mol])]

fde_res = adffragmentsjob(frags, basis="SZ").run()

cgrid = cubegrid(fde_res.get_molecule(), spacing=0.2)

# order = 0 (only density)
fde_dens = fde_res.get_density(grid=cgrid)
fde_nonfrozen_dens = fde_res.get_nonfrozen_density(grid=cgrid)
fde_frozen_dens = fde_res.get_frozen_density(grid=cgrid)

diffdens = fde_dens - (fde_nonfrozen_dens + fde_frozen_dens)

if 'unittesting' in pyadfenv.options:
    testobj.assert_(diffdens.values.max() < 1e-8)

# order = 1 (density, density gradient)
fde_dens = fde_res.get_density(grid=cgrid, order=1)
fde_nonfrozen_dens = fde_res.get_nonfrozen_density(grid=cgrid, order=1)
fde_frozen_dens = fde_res.get_frozen_density(grid=cgrid, order=1)

diffdens = fde_dens - (fde_nonfrozen_dens + fde_frozen_dens)

print fde_dens
print fde_nonfrozen_dens, fde_frozen_dens
print diffdens

if 'unittesting' in pyadfenv.options:
    testobj.assert_(diffdens[0].values.max() < 1e-8)
    testobj.assert_(diffdens[1].values.max() < 1e-8)

# order = 2 (density, density gradient, density Hessian)
fde_dens = fde_res.get_density(grid=cgrid, order=2)
fde_nonfrozen_dens = fde_res.get_nonfrozen_density(grid=cgrid, order=2)
fde_frozen_dens = fde_res.get_frozen_density(grid=cgrid, order=2)

diffdens = fde_dens - (fde_nonfrozen_dens + fde_frozen_dens)

if 'unittesting' in pyadfenv.options:
    testobj.assert_(diffdens[0].values.max() < 1e-8)
    testobj.assert_(diffdens[1].values.max() < 1e-8)
    testobj.assert_(diffdens[2].values.max() < 1e-8)
