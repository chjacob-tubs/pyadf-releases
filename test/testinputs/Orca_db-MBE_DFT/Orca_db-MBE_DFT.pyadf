######################################################################
#
# PyADF test DBMBE_CC_Paper_test
#
# Test of the CC db-MBE calculations performed in paper "Coupled-
# Cluster Density-Based Many-Body Expansion" by Focke and Jacob
# (J. Phys. Chem. A, 2023).
#
######################################################################
import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

max_order = 3


# read coordinates of OH(H2O)2 cluster
mol_tot = molecule(os.path.join(pyadfenv.outdir, 'OH_H2O_2.xyz'))
mol_tot.set_charge(-1)
mol_list = [molecule(os.path.join(pyadfenv.outdir, 'OH.xyz')),
            molecule(os.path.join(pyadfenv.outdir, 'H2O_1.xyz')),
            molecule(os.path.join(pyadfenv.outdir, 'H2O_2.xyz'))]
mol_list[0].set_charge(-1)


#############################################
# 0) Function for creating the Grid
#############################################
# noinspection PyUnusedLocal
def calculate_mol_grid(mol, frozen_mols=None, savetape10=False):
    mol.set_symmetry('NOSYM')
    settings = adfsettings(zlmfit=True)
    settings.set_functional('BP86')
    settings.set_integration(4.0, becke='Basic')
    if savetape10:
        settings.set_save_tapes([21, 10])

    res = adfsinglepointjob(mol, basis='SZ', core='Medium', settings=settings,
                            options=['TOTALENERGY', 'TOL 1e-6']).run()
    return res


# conversion factor from Hartree to kJ/mol
kJmol = conversion('Hartree', 'kJ/mol')

# perform calculation of the supermolecule as reference
res_supermol_grid = calculate_mol_grid(mol_tot, savetape10=True)
grid = adfgrid(res_supermol_grid)

functional = 'PBE'
nadkin = 'PW91k'


###############################################
# 1) DFT with DFT density
###############################################

# noinspection PyUnusedLocal
def calculate_mol(mol, frozen_mols=None, savetape10=False):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    settings = OrcaSettings(method='DFT', ri=False)
    settings.set_extra_keywords('VeryTightSCF')
    settings.set_functional(functional)
    settings.set_basis('ma-def2-SVP')
    res = OrcaSinglePointJob(mol, settings=settings).run()
    return res


###############################################
# A) energy-based MBE
###############################################

# perform MBE calculations (up to third order)
mbejob = MBEJob(mol_list, calculate_mol, order=max_order)
mberes = mbejob.run()

# perform calculation of the supermolecule as reference
res_supermol = calculate_mol(mol_tot, savetape10=True)
toten_supermol = res_supermol.get_total_energy()

tot_energy_eb = mberes.get_total_energy()
tot_energy_monomers = mberes.get_total_energy(order=1)
int_energy_supermol = (toten_supermol - tot_energy_monomers)
int_energy_eb = mberes.get_interaction_energy()

tot_energy_eb_by_order = mberes.get_total_energies_by_order()

print()
print('DFT WITH DFT DENSITY')
print('FIRST RESULTS WITH ' + functional + ' AND ' + nadkin)
print("SUPERMOL Total energy (Hartree)", toten_supermol)
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy eb-MBE (Hartree): ", tot_energy_eb_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy eb-MBE (kJ/mol): ", tot_energy_eb_by_order[i] * kJmol)
print()

int_energy_eb_by_order = mberes.get_interaction_energies_by_order()
for i in range(max_order):
    print(str(i+1) + ". Interaction energy eb-MBE (Hartree): ", int_energy_eb_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Interaction energy eb-MBE (kJ/mol): ", int_energy_eb_by_order[i] * kJmol)
print()

for i in range(max_order):
    error_eb = (int_energy_eb_by_order[i] - int_energy_supermol)
    print(str(i+1) + ". Error compared to supermol eb-MBE (Hartree): ", error_eb)
print()

for i in range(max_order):
    error_eb = (int_energy_eb_by_order[i] - int_energy_supermol) * kJmol
    print(str(i+1) + ". Error compared to supermol eb-MBE (kJ/mol): ", error_eb)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb_by_order,
                              [-228.240303916324, -228.345246733209, -228.33851390238], 6)
    testobj.assertAlmostEqual(int_energy_eb_by_order,
                              [0, -0.10494281688499996, -0.09820998605597708], 6)
    testobj.assertAlmostEqual(int_energy_supermol, -0.0982099860559913, 6)

###############################################
# B) density-based MBE
###############################################

dbmbe_job = DensityBasedMBEJob(mberes, grid=grid, nadxc=functional, nadkin=nadkin)
dbmbe_res = dbmbe_job.run()
tot_energy_db = dbmbe_res.get_total_energy()
int_energy_db = dbmbe_res.get_interaction_energy()

tot_energy_db_by_order = dbmbe_res.get_total_energies_by_order()

print()
print('DFT WITH DFT DENSITY')
print('NEW RESULTS WITH ' + functional + ' AND ' + nadkin)
print()

for i in range(max_order):
    print(str(i+1) + ".  Total energy db-MBE (Hartree): ", tot_energy_db_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy db-MBE (kJ/mol): ", tot_energy_db_by_order[i] * kJmol)
print()

int_energy_db_by_order = dbmbe_res.get_interaction_energies_by_order()
for i in range(max_order):
    print(str(i+1) + ". Interaction energy db-MBE (Hartree): ", int_energy_db_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Interaction energy db-MBE (kJ/mol): ", int_energy_db_by_order[i] * kJmol)
print()

for i in range(max_order):
    error_db = (int_energy_db_by_order[i] - int_energy_supermol)
    print(str(i+1) + ". Error compared to supermol db-MBE (Hartree): ", error_db)
print()

for i in range(max_order):
    error_db = (int_energy_db_by_order[i] - int_energy_supermol) * kJmol
    print(str(i+1) + ". Error compared to supermol db-MBE (kJ/mol): ", error_db)
print()

for i in range(max_order):
    print(str(i+1) + ". Density Correction (Hartree): ", dbmbe_res.get_dbcorr(i+1))
print()

for i in range(max_order):
    print(str(i+1) + ". Density Correction (kJ/mol): ", (dbmbe_res.get_dbcorr(i+1) * kJmol))

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db_by_order,
                              [-228.27622998044552, -228.33899755522313, -228.33851063244853], 6)
    testobj.assertAlmostEqual(int_energy_db_by_order,
                              [-0.03592606412152577, -0.0986936388991353, -0.0982067161245368], 6)
