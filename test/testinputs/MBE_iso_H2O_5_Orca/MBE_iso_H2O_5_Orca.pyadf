import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

max_order = 3

# read coordinates of (H2O)5 cluster
mol_tot = molecule(os.path.join(pyadfenv.outdir, 'h2o_5.xyz'))

# generate list of monomer fragments
mol_list = mol_tot.separate()


# noinspection PyUnusedLocal
def calculate_mol_grid(mol, frozen_mols=None, savetape10=False):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    mol.set_symmetry('NOSYM')
    settings = adfsettings(zlmfit=True)
    settings.set_functional('BP86')
    settings.set_integration(4.0, becke='Basic')
    if savetape10:
        settings.set_save_tapes([21, 10])

    res = adfsinglepointjob(mol, basis='SZ', core='Medium', settings=settings,
                            options=['TOTALENERGY', 'TOL 1e-6']).run()
    return res


# conversion factor from Hartree to kJ/mol
kJmol = conversion('Hartree', 'kJ/mol')

# perform calculation of the supermolecule as reference
res_supermol_grid = calculate_mol_grid(mol_tot, savetape10=True)
grid = adfgrid(res_supermol_grid)


# noinspection PyUnusedLocal
def calculate_mol(mol, frozen_mols=None, savetape10=False):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    settings = OrcaSettings(method='DFT', ri=False)
    settings.set_functional('PBE')
    settings.set_basis('ma-def2-SVP')
    res = OrcaSinglePointJob(mol, settings=settings).run()
    return res


res_supermol = calculate_mol(mol_tot)
toten_supermol = res_supermol.get_total_energy()

print("Total energy supermolecule (Hartree): ", toten_supermol)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(toten_supermol, -381.283963385733, 6)

###############################################
# A) energy-based MBE
###############################################

# perform MBE calculations (up to third order)
mbejob = MBEJob(mol_list, calculate_mol, order=max_order)
mberes = mbejob.run()

tot_energy_eb = mberes.get_total_energy()
tot_energy_monomers = mberes.get_total_energy(order=1)
int_energy_eb = mberes.get_interaction_energy()

print("Total energy eb-MBE-3 (Hartree)       : ", tot_energy_eb)
print("Total energy monomers (Hartree)       : ", tot_energy_monomers)
print("Interaction energy eb-MBE-3 (Hartree) : ", int_energy_eb)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb, -381.2838101051129, 6)
    testobj.assertAlmostEqual(tot_energy_monomers, -381.253499000008, 6)
    testobj.assertAlmostEqual(int_energy_eb, -0.030311105104900093, 6)

tot_energy_eb_by_order = mberes.get_total_energies_by_order()

print("Total energy eb-MBE-1 (Hartree)       : ", tot_energy_eb_by_order[0])
print("Total energy eb-MBE-2 (Hartree)       : ", tot_energy_eb_by_order[1])
print("Total energy eb-MBE-3 (Hartree)       : ", tot_energy_eb_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb_by_order[0], -381.253499000008, 6)
    testobj.assertAlmostEqual(tot_energy_eb_by_order[1], -381.283528966778, 6)
    testobj.assertAlmostEqual(tot_energy_eb_by_order[2], -381.2838101051129, 5)

int_energy_eb_by_order = mberes.get_interaction_energies_by_order()

print("Interaction energy eb-MBE, 1st order contribution (kJ/mol) : ", int_energy_eb_by_order[0])
print("Interaction energy eb-MBE, 2nd order contribution (kJ/mol) : ", int_energy_eb_by_order[1])
print("Interaction energy eb-MBE, 3rd order contribution (kJ/mol) : ", int_energy_eb_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_energy_eb_by_order[0], 0.0, 6)
    testobj.assertAlmostEqual(int_energy_eb_by_order[1], -0.030029966770030114, 6)
    testobj.assertAlmostEqual(int_energy_eb_by_order[2], -0.030311105104900093, 6)

int_energy_supermol = (toten_supermol - tot_energy_monomers)

error_eb_1 = (int_energy_eb_by_order[0] - int_energy_supermol) * kJmol
error_eb_2 = (int_energy_eb_by_order[1] - int_energy_supermol) * kJmol
error_eb_3 = (int_energy_eb_by_order[2] - int_energy_supermol) * kJmol

print("Error compared to supermol, eb-MBE-1 (kJ/mol): ", error_eb_1)
print("Error compared to supermol, eb-MBE-2 (kJ/mol): ", error_eb_2)
print("Error compared to supermol, eb-MBE-3 (kJ/mol): ", error_eb_3)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_eb_1, 79.98423373795423, 4)
    testobj.assertAlmostEqual(error_eb_2,  1.1405668096490251, 4)
    testobj.assertAlmostEqual(error_eb_3,  0.4024382128039364, 4)

###############################################
# B) density-based MBE
###############################################


dbmbe_job = DensityBasedMBEJob(mberes, grid=grid, nadxc=None, nadkin=None)
dbmbe_res = dbmbe_job.run()

tot_energy_db = dbmbe_res.get_total_energy()
int_energy_db = dbmbe_res.get_interaction_energy()

print("Total energy db-MBE-3 (Hartree)       : ", tot_energy_db)
print("Interaction energy db-MBE-3 (Hartree) : ", int_energy_db)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db, -381.28373731552267, 6)
    testobj.assertAlmostEqual(int_energy_db, -0.030238315514679925, 6)

tot_energy_db_by_order = dbmbe_res.get_total_energies_by_order()

print("Total energy db-MBE-1 (Hartree)       : ", tot_energy_db_by_order[0])
print("Total energy db-MBE-2 (Hartree)       : ", tot_energy_db_by_order[1])
print("Total energy db-MBE-3 (Hartree)       : ", tot_energy_db_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db_by_order[0], -381.2780511370761, 6)
    testobj.assertAlmostEqual(tot_energy_db_by_order[1], -381.28473144307156, 6)
    testobj.assertAlmostEqual(tot_energy_db_by_order[2], -381.28373731552267, 6)

int_energy_db_by_order = dbmbe_res.get_interaction_energies_by_order()

print("Interaction energy db-MBE, 1st order contribution (kJ/mol) : ", int_energy_db_by_order[0])
print("Interaction energy db-MBE, 2nd order contribution (kJ/mol) : ", int_energy_db_by_order[1])
print("Interaction energy db-MBE, 3rd order contribution (kJ/mol) : ", int_energy_db_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_energy_db_by_order[0], -0.024552137068099, 6)
    testobj.assertAlmostEqual(int_energy_db_by_order[1], -0.031232443063572646, 6)
    testobj.assertAlmostEqual(int_energy_db_by_order[2], -0.030238315514679925, 6)

error_db_1 = (int_energy_db_by_order[0] - int_energy_supermol) * kJmol
error_db_2 = (int_energy_db_by_order[1] - int_energy_supermol) * kJmol
error_db_3 = (int_energy_db_by_order[2] - int_energy_supermol) * kJmol

print("Error compared to supermol, db-MBE-1 (kJ/mol): ", error_db_1)
print("Error compared to supermol, db-MBE-2 (kJ/mol): ", error_db_2)
print("Error compared to supermol, db-MBE-3 (kJ/mol): ", error_db_3)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_db_1, 15.522606717201045, 4)
    testobj.assertAlmostEqual(error_db_2, -2.016534265529928, 4)
    testobj.assertAlmostEqual(error_db_3, 0.5935472556848719, 4)
