import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

helix_mol = molecule(os.path.join(pyadfenv.outdir, '310_h.pdb'), 'pdb')

settings = adfsettings()
settings.set_save_tapes([21, 10])
settings.set_functional('BP86')
settings.set_integration(4.0, becke='Normal')
settings.set_ncycles(200)
options = ['TOTALENERGY', 'NOSYM', 'NOSYMFIT']
core = 'None' 
basis = 'SZ'
caps = 'mfcc'
cutoff = 3.0


def calculate_mol(mol):
    res = adfsinglepointjob(mol, settings=settings, core=core, basis=basis, options=options).run()
    return res


frags = cappedfragmentlist()
frags.partition_protein(helix_mol, caps=caps, fragsize=1)

mfcc_res = adfmfccjob(frags, settings=settings, core=core, basis=basis, options=options).run()
toten_mfcc = mfcc_res.get_total_energy()

mfccmbe_onlyff_res = adfmfccmbejob(frags, jobfunc=calculate_mol, caps=caps, onlyffterms=True, cutoff=cutoff).run()
toten_mfccmbe_ff = mfccmbe_onlyff_res.get_total_energy()

mfccmbe_res = adfmfccmbejob(frags, jobfunc=calculate_mol, caps=caps, cutoff=cutoff).run()
toten_mfccmbe = mfccmbe_res.get_total_energy()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(toten_mfcc, -987.5392375930032, 6)
    testobj.assertAlmostEqual(toten_mfccmbe_ff, -0.015961041139121335, 6)
    testobj.assertAlmostEqual(toten_mfccmbe, -0.00903268940368207, 6)
