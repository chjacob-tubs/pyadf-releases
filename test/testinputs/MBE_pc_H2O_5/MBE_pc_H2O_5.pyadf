max_order = 2

# read coordinates of (H2O)5 cluster
mol_tot = molecule(os.path.join(pyadfenv.outdir, 'h2o_5.xyz'))

# generate list of monomer fragments
mol_list = mol_tot.separate()


def calculate_mol(mol, frozen_mols):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    mol.set_symmetry('NOSYM')

    pc = []
    for frmol in frozen_mols:
        cc = frmol.get_coordinates()
        sym = frmol.get_atom_symbols()
        for s, c in zip(sym, cc):
            if s == 'H':
                charge = 0.417
            elif s == 'O':
                charge = -0.834
            else:
                raise PyAdfError("Wrong atomic Symbol for TIP3P charges")
            pc.append(c + [charge])

    settings = adfsettings(zlmfit=True)
    settings.set_functional('BP86')
    settings.set_integration(4.0, becke='Basic')

    job = adfsinglepointjob(mol, basis='SZ', core='Medium', settings=settings,
                            pointcharges=pc, options=['TOTALENERGY', 'TOL 1e-6'])

    res = job.run()
    return res


# conversion factor from Hartree to kJ/mol
kJmol = conversion('Hartree', 'kJ/mol')

# total energy of the supermolecular reference (see test MBE_iso_H2O_5)
toten_supermol = -380.14175922954365

###############################################
# A) energy-based MBE
###############################################

# perform MBE calculations (up to third order)
mbejob = MBEJob(mol_list, calculate_mol, order=max_order)
mberes = mbejob.run()

tot_energy_eb = mberes.get_total_energy()

# Attention: The interaction energy is now with respect to the
#            *embedded* monomers, not to the isolated ones.
#            For the "real" interaction energy, an additional
#            calculation for the isolated monomers is required.
int_energy_eb = mberes.get_interaction_energy()

print "Total energy eb-MBE-2 (Hartree)       : ", tot_energy_eb
print "Interaction energy eb-MBE-2 (Hartree) : ", int_energy_eb
print

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb, -380.1373311994839, 6)
    testobj.assertAlmostEqual(int_energy_eb, -0.063783195907689, 6)

toten_eb_by_order = mberes.get_total_energies_by_order()

error_eb_1 = (toten_eb_by_order[0] - toten_supermol) * kJmol
error_eb_2 = (toten_eb_by_order[1] - toten_supermol) * kJmol

print "Error compared to supermol, eb-MBE-1 (kJ/mol): ", error_eb_1
print "Error compared to supermol, eb-MBE-2 (kJ/mol): ", error_eb_2

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_eb_1, 179.0885494112857, 4)
    testobj.assertAlmostEqual(error_eb_2,  11.6257909271805, 4)

###############################################
# B) density-based MBE
###############################################

# this is only needed to obtain a supermolecular integration grid
mol_tot.set_symmetry('NOSYM')
settings = adfsettings(zlmfit=True)
settings.set_functional('BP86')
settings.set_integration(4.0, becke='Basic')
settings.set_ncycles(1)  # do not converge SCF, we only need the grid
settings.set_save_tapes([21, 10])

res_supermol = adfsinglepointjob(mol_tot, basis='SZ', core='Medium', settings=settings).run()
grid = adfgrid(res_supermol)

dbmbe_job = DensityBasedMBEJob(mberes, grid=grid, nadxc=None, nadkin=None)
dbmbe_res = dbmbe_job.run()

tot_energy_db = dbmbe_res.get_total_energy()
int_energy_db = dbmbe_res.get_interaction_energy()

print "Total energy db-MBE-2 (Hartree)       : ", tot_energy_db
print "Interaction energy db-MBE-2 (Hartree) : ", int_energy_db
print

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db, -380.1417309205247, 6)
    testobj.assertAlmostEqual(int_energy_db,   -0.0681829169484, 6)

toten_db_by_order = dbmbe_res.get_total_energies_by_order()

error_db_1 = (toten_db_by_order[0] - toten_supermol) * kJmol
error_db_2 = (toten_db_by_order[1] - toten_supermol) * kJmol

print "Error compared to supermol, db-MBE-1 (kJ/mol): ", error_db_1
print "Error compared to supermol, db-MBE-2 (kJ/mol): ", error_db_2

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_db_1, 128.121110027912, 4)
    testobj.assertAlmostEqual(error_db_2,   0.073161716399, 4)
