import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

import numpy

fde_settings = adfsettings()
fde_settings.set_save_tapes([21, 10])
fde_settings.set_functional('BLYP')
# fde_settings.set_functional('BP86')
fde_settings.ncycles = 1000
fde_settings.set_occupations(['KEEPORBITALS=' + str(fde_settings.ncycles)])
fde_settings.set_integration(accint=4.0, acclist=[4.0, 4.0])

# other options
basis_active = "DZP"
gen_sym_opts = ['NOSYM', 'NOSYMFIT']
gen_fde_opts = gen_sym_opts
fde_act_opts = {'FULLGRID': '', 'ENERGY': ''}
fde_frz_opts = {}

file_h2o = os.path.join(pyadfenv.outdir, 'H2O.xyz')
file_nh3 = os.path.join(pyadfenv.outdir, 'NH3.xyz')

m_h2o = molecule(file_h2o)
m_nh3 = molecule(file_nh3)

m_tot = m_h2o + m_nh3

print(m_tot.print_coordinates())

adf_settings = adfsettings(functional='BLYP')
# adf_settings = adfsettings(functional='BP86')
adf_settings.set_save_tapes([21, 10])

r_tot = adfsinglepointjob(m_tot, basis_active, settings=adf_settings, options=['NOSYMFIT']).run()
agrid = adfgrid(r_tot)

###
# FDE with freeze-and-thaw, h2o active

r_h2o = adfsinglepointjob(m_h2o, basis_active, settings=adf_settings, options=['NOSYMFIT', 'TOL 1e-3']).run()
r_nh3 = adfsinglepointjob(m_nh3, basis_active, settings=adf_settings, options=['NOSYMFIT', 'TOL 1e-3']).run()

frags = [fragment(None, [m_h2o]),
         fragment(r_nh3, [m_nh3], isfrozen=True, fdeoptions=fde_frz_opts)]

fde_res = adffragmentsjob(frags, basis_active, settings=fde_settings, fde=fde_act_opts,
                          options=gen_fde_opts).run()

embpot_file = pyadfenv.outdir + os.sep + 'EMBPOT.BLYP.h2o'
frzdns_file = pyadfenv.outdir + os.sep + 'FRZDNS.BLYP.h2o'
fde_res.export_embedding_data(embpot_file, frzdns_file, hessian=True)

fde_dens_h2o = fde_res.get_nonfrozen_density(grid=agrid, fit=False, order=2)
fde_elpot_h2o = fde_res.get_nonfrozen_potential(grid=agrid, pot='nuc') \
                + fde_res.get_nonfrozen_potential(grid=agrid, pot='coul')

fde_dens_nh3 = fde_res.get_frozen_density(grid=agrid, fit=False, order=2)
fde_elpot_nh3 = fde_res.get_frozen_potential(grid=agrid, pot='nuc') \
                + fde_res.get_frozen_potential(grid=agrid, pot='coul')

fde_embpot = fde_res.get_embedding_potential(grid=agrid)
fde_nadpot_k = fde_res.get_embedding_potential(grid=agrid, pot="kin")
fde_nadpot_xc = fde_res.get_embedding_potential(grid=agrid, pot="xc")

###
# before proceeding, a test on the xc potential for the fragments

fde_xcpot_h2o = fde_res.get_nonfrozen_potential(grid=agrid, pot="xc")
fde_xcpot_nh3 = fde_res.get_frozen_potential(grid=agrid, pot="xc")

blyp = xcfun.Functional({'BeckeX': 1.0, 'LYPC': 1.0})
# blyp = xcfun.Functional({'BeckeX': 1.0, 'VWN5c': 1.0, 'P86corrC': 1.0})

xcfun_xcpot_h2o = blyp.eval_potential_n(density=fde_dens_h2o[0].values,
                                        densgrad=fde_dens_h2o[1].values,
                                        denshess=fde_dens_h2o[2].values)[:, 1]

xcfun_xcpot_nh3 = blyp.eval_potential_n(density=fde_dens_nh3[0].values,
                                        densgrad=fde_dens_nh3[1].values,
                                        denshess=fde_dens_nh3[2].values)[:, 1]

if 'unittesting' in pyadfenv.options:
    threshold = 1e-8

    fde_xcpot_h2o = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, fde_xcpot_h2o.values)
    xcfun_xcpot_h2o = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, xcfun_xcpot_h2o)

    fde_xcpot_nh3 = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, fde_xcpot_nh3.values)
    xcfun_xcpot_nh3 = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, xcfun_xcpot_nh3)

    for i in range(xcfun_xcpot_h2o.size):
        diff = abs(xcfun_xcpot_h2o[i] - fde_xcpot_h2o[i])
    testobj.assertAlmostEqual(xcfun_xcpot_h2o, fde_xcpot_h2o, places=6)

    for i in range(xcfun_xcpot_nh3.size):
        diff = abs(xcfun_xcpot_nh3[i] - fde_xcpot_nh3[i])
    testobj.assertAlmostEqual(xcfun_xcpot_nh3, fde_xcpot_nh3, places=6)

###
# using pyembed to calculate the embedding potentials from the densities

embed_settings = EmbedXCFunSettings()
embed_settings.set_fun_nad_xc({'BeckeX': 1.0, 'LYPC': 1.0})
# embed_settings.set_fun_nad_xc ({'BeckeX': 1.0, 'VWN5c': 1.0, 'P86corrC': 1.0})
embed_settings.set_fun_nad_kin({'pw91k': 1.0})

embed_settings.show_functionals()

embed_eval = EmbedXCFunEvaluator(settings=embed_settings)

embpot_h2o_dd = embed_eval.get_emb_pot(fde_dens_h2o, fde_dens_nh3, fde_elpot_nh3)
nadkin_h2o_dd = embed_eval.get_nad_pot_kin(fde_dens_h2o, fde_dens_nh3)
nadxc_h2o_dd = embed_eval.get_nad_pot_xc(fde_dens_h2o, fde_dens_nh3)

embpot_nh3_dd = embed_eval.get_emb_pot(fde_dens_nh3, fde_dens_h2o, fde_elpot_h2o)

if 'unittesting' in pyadfenv.options:
    threshold = 1e-8

    embpot_h2o_dd = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, embpot_h2o_dd.values)
    embpot_h2o_dd = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, embpot_h2o_dd)
    fde_embpot = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, fde_embpot.values)
    fde_embpot = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, fde_embpot)

    nadkin_h2o_dd = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, nadkin_h2o_dd.values)
    nadkin_h2o_dd = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, nadkin_h2o_dd)
    fde_nadpot_k = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, fde_nadpot_k.values)
    fde_nadpot_k = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, fde_nadpot_k)

    nadxc_h2o_dd = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, nadxc_h2o_dd.values)
    nadxc_h2o_dd = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, nadxc_h2o_dd)
    fde_nadpot_xc = numpy.where(fde_dens_h2o[0].values < 1e-6, 0.0, fde_nadpot_xc.values)
    fde_nadpot_xc = numpy.where(fde_dens_nh3[0].values < 1e-6, 0.0, fde_nadpot_xc)

    for i in range(nadkin_h2o_dd.size):
        diff = abs(nadkin_h2o_dd[i] - fde_nadpot_k[i])
    testobj.assertAlmostEqual(nadkin_h2o_dd, fde_nadpot_k, places=6)

    for i in range(nadxc_h2o_dd.size):
        diff = abs(nadxc_h2o_dd[i] - fde_nadpot_xc[i])
    testobj.assertAlmostEqual(nadxc_h2o_dd, fde_nadpot_xc, places=6)

    for i in range(embpot_h2o_dd.size):
        diff = abs(embpot_h2o_dd[i] - fde_embpot[i])
    testobj.assertAlmostEqual(embpot_h2o_dd, fde_embpot, places=6)
