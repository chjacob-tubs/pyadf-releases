import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

file_h2o_1 = os.path.join(pyadfenv.outdir, 'FDE-H2O-1.xyz')
file_h2o_2 = os.path.join(pyadfenv.outdir, 'FDE-H2O-2.xyz')
file_mol = os.path.join(pyadfenv.outdir, 'FDE-mol.xyz')

m_h2o_1 = molecule(file_h2o_1)
m_h2o_2 = molecule(file_h2o_2)
m_mol = molecule(file_mol)

m_tot = m_mol + m_h2o_1 + m_h2o_2

print(m_tot.print_coordinates())

# Prepare first water molecule
r_h2o_1 = adfsinglepointjob(m_h2o_1, 'SZ', options=['NOSYMFIT']).run()

# Prepare second water molecule
r_h2o_2 = adfsinglepointjob(m_h2o_2, 'SZ', options=['NOSYMFIT']).run()

# isolated water molecule
r_mol = adfsinglepointjob(m_mol, 'DZP', options=['NOSYMFIT']).run()

dipole_vect = r_mol.get_dipole_vector()
print("Dipole moment for isolated water molecule (ADF): ", dipole_vect)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(dipole_vect, [0.0, 0.0, 0.731050], 4)

fdesettings = adfsettings()
# save TAPE10 is needed for exporting the FDE potential
fdesettings.set_save_tapes([21, 10])
fdesettings.set_functional('BP86')
fdesettings.set_integration(accint=4.0)

frags = [fragment(r_h2o_1, [m_h2o_1], isfrozen=True, fdeoptions={'RELAX': ""}),
         fragment(r_h2o_2, [m_h2o_2], isfrozen=True, fdeoptions={'RELAX': ""}),
         fragment(None, [m_mol])]

fderes = adffragmentsjob(frags, basis="DZP", settings=fdesettings,
                         options=['NOSYM'], fde={'RELAXCYCLES': 2}).run()

dipole_vect = fderes.get_dipole_vector()
print("Dipole moment for FDE water molecule (ADF): ", dipole_vect)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(dipole_vect, [0.0, 0.0, 0.775334], 4)

# Dalton without embedding
settings = MolcasSettings(basis='cc-pVDZ', cholesky=False)
molcas_res = MolcasSinglePointJob(m_mol, method='HF', settings=settings).run()

energy = molcas_res.get_energy()
print("HF energy for isolated water molecule (Molcas): ", energy)

dipole_vect = molcas_res.get_dipole_vector()
print("Dipole moment for isolated water molecule (Molcas): ", dipole_vect)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(energy, -76.0247289118, 6)
    testobj.assertAlmostEqual(dipole_vect, [0.0, 0.0, 0.821500], 4)

# Molcas with embedding
molcas_res = MolcasSinglePointJob(m_mol, fdein=fderes, settings=settings).run()

energy = molcas_res.get_energy()
print("HF energy for FDE water molecule (Molcas): ", energy)

dipole_vect = molcas_res.get_dipole_vector()
print("Dipole moment for FDE water molecule (Molcas): ", dipole_vect)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(energy, -75.7098997516, 6)
    testobj.assertAlmostEqual(dipole_vect, [0.0, 0.0, 0.881206], 4)
