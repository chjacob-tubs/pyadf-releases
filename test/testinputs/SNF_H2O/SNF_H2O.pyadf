import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

import numpy as np

mol = molecule(os.path.join(pyadfenv.outdir, 'water.xyz'))

# first, we do a Turbomole geometry optimization

settings = TurbomoleGeometryOptimizationSettings(verbose_level=2)
settings.set_dft_grid('m4')
settings.set_scfconv(8)
settings.set_convergence_criterion(5)

# default settings: RI-DFT/BP
settings.set_basis_set('def2-SVP')

res = TurbomoleGeometryOptimizationJob(mol, method='dft', settings=settings).run()

opt_mol = res.get_molecule()

opt_energy = res.get_energy()
print("Final Total Energy: ", opt_energy)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(opt_energy, -76.363581, 5)

    ref_mol = molecule(os.path.join(pyadfenv.outdir, 'water_ref.xyz'))
    testobj.assertAlmostEqualMolecules(opt_mol, ref_mol)

# now for the SNF part

snf_res = SNFJob(res).run()
freqs = snf_res.get_wave_numbers()
ints = snf_res.get_ir_ints()

modes_mw = snf_res.get_vibs().modes.modes_mw

print("Vibrational frequencies [cm-1]: ", freqs)
print("IR intensities: ", ints)
print("Normal Modes: ", modes_mw)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(freqs, [1613.27574, 3689.14364, 3785.06862], 2)
    testobj.assertAlmostEqual(ints, [48.219271,  2.620527, 21.009906], 2)

    modes_mw_orig = np.array([[0.2198698, 0.0, 0.15552986, -0.68017938, 0.0, 0.03266997,
                               -0.19573982, 0.0, -0.65225941],
                              [0.16159995, 0.0, 0.11518997, 0.00579, 0.0, -0.69492979,
                               -0.64956981, 0.0, 0.23603993],
                              [-0.15419077, 0.0, 0.21702108, -0.04340022, 0.0, -0.67825337,
                               0.65765326, 0.0, -0.18630092]])
    overlap = np.dot(modes_mw, modes_mw_orig.T)

    testobj.assertAlmostEqual(overlap.diagonal(), np.ones(3), 4)
