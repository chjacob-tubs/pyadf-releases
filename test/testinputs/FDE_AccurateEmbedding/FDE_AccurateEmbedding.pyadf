import os
from pyadf import *

if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

########################################################################
#                                   #                                  #
#  potential reconstruction script: #   Samuel Fux 2009 @ETHZ          #
#  validation of kinetic energy     #                                  #
#  density functionals              #   Christoph R. Jacob 2009 @ETHZ  #
#                                   #                                  #
########################################################################

pyadfenv.options['save_results'] = True

#################################
# general variables and options #
#################################

file_frag1 = 'mol_frag1.xyz'  # file name for subsystem 1
sub1_charge = 0  # charge of subsystem 1

file_frag2 = 'mol_frag2.xyz'  # file name for subsystem 1
sub2_charge = -1  # charge of subsystem 2

rho1 = 2  # subsystem for which the potential is reconstructed

basis = 'TZ2P'  # basis set for all calculations
ghostbasis = True  # use of additional basis functions in the frozen subsystem

grid_spacing = 0.01  # step size for the grid, used in all the calculations

cyc = 500  # max. number of iterations for the potential reconstruction
lam = 1.0e-3  # smoothing parameter for the potential
con = 5.0e-3  # convergence criterion for the gradient norm (potential reconstruction)
eigsh = 0.08  # small eigenvalues of the Hessian are shifted by eigsh

# approximate functionals that are included
kin_funcs = ['thomasfermi', 'tf9w', 'pw91k', 'pw86k', 'llp91', 'ol91a', 'ol91b', 'weiz', 'thakkar92', 'pbe2', 'pbe3',
             'pbe4']

settings = adfsettings(functional='BP86', accint=4.0)
potopts = {'EIGENSHIFT': eigsh, 'LAMBDA': lam, 'CONVERGE': con, 'CYCLES': cyc}

######################################
# reading coordinates from xyz-files #
######################################

if rho1 == 1:
    mol_frag1 = molecule(os.path.join(pyadfenv.outdir, file_frag1))
    mol_frag2 = molecule(os.path.join(pyadfenv.outdir, file_frag2))
    mol_frag1.set_charge(sub1_charge)
    mol_frag2.set_charge(sub2_charge)
else:
    mol_frag1 = molecule(os.path.join(pyadfenv.outdir, file_frag2))
    mol_frag2 = molecule(os.path.join(pyadfenv.outdir, file_frag1))
    mol_frag1.set_charge(sub2_charge)
    mol_frag2.set_charge(sub1_charge)

##########################################################################
# the accurate embedding job (see ADF_FDE_AccurateEmbedding)
# the results of the individual jobs are available in the results object
##########################################################################

job = adfaccurateembeddingjob(frag1=mol_frag1, frag2=mol_frag2, ghostbasis=ghostbasis,
                              basis=basis, settings=settings, potoptions=potopts)
results = job.run()

##########################################
# We check the error in the density here #
##########################################

print("Error in density: ", results.dens_error)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(results.dens_error, 0.0239946396, 6)

######################################################
# Now setup the grid on which we want the potentials
######################################################

print('Preparing grid')


# gets boundaries for the grid, which is used for the output of the potential
def get_boundaries(mol):
    import numpy
    coords = numpy.array(mol.get_coordinates())  # returns an array [natoms,3]
    max_x = coords[:, 0].max()
    max_x = float(round(10.0 * max_x)) / 10.0 + 1.2
    min_x = coords[:, 0].min()
    min_x = float(round(10.0 * min_x)) / 10.0 - 1.2

    return max_x, min_x


x_max, x_min = get_boundaries(job.supermol)
xlength = x_max - x_min

# construct equidistant grid along the x-axis with step-size = grid_spacing Angstrom
myGrid = cubegrid(job.supermol, spacing=grid_spacing)
myGrid.set_dimensions([x_min, 0.0, 0.0], [int(xlength * (1.0 / grid_spacing)) + 1, 1, 1])

######################################
# Finally, write the potentials
######################################

# get the final reconstructed potential and write it to a file #
results.write_accurate_potential(myGrid, pyadfenv.outdir)

# get kinetic potential of for density functionals #
results.write_approximate_potentials(myGrid, kin_funcs, pyadfenv.outdir)

print('potential reconstruction terminated')
