import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

###################################################################
#
# PyADF test ADFPlot_Orbital
#
# Test (localized) orbitals in PyADF's Plot module
#  - calculating individual orbitals
#  - calculating orbitals densities
#  - calculating localized orbital densities
#
# Test by Christoph Jacob, ETH Zurich and KIT, 2009-2010
#
###################################################################

h2o = molecule(os.path.join(pyadfenv.outdir, 'H2O.xyz'))

settings = adfsettings()
settings.set_save_tapes([21, 10])
settings.set_lmo(True)

results = adfsinglepointjob(h2o, 'SZ', settings=settings).run()

# check orbital energies
ehomo = results.get_orbital_energy(orb='HOMO')
elumo = results.get_orbital_energy(orb='LUMO')
eorb = results.get_orbital_energy(orb=3, irrep='A1')

testobj.assertAlmostEqual(ehomo, -1.606737, 3)
testobj.assertAlmostEqual(elumo, 7.7403346, 3)
testobj.assertAlmostEqual(eorb, -3.707, 3)

cgrid = cubegrid(results.get_molecule(), spacing=0.1)
agrid = adfgrid(results)

for typ, grid in [("cub", cgrid), ("adf", agrid)]:

    # get a single orbitals (and its density)
    orb = results.get_orbital(grid=grid, irrep="B1", num=1)
    orbdens = results.get_orbital_density(grid=grid, orbs={"B1": 1})

    orbint = orb.integral()
    orbdensint = orbdens.integral()
    print("     Integral of the orbital         ", orbint)
    print("     Integral of the orbital density ", orbdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(orbint, 0.0, 6)
        if typ == 'cub':
            testobj.assert_(abs(orbdensint - 2.0) < 0.04)
        if typ == 'adf':
            testobj.assertAlmostEqual(orbdensint, 2.0, 3)

    # get density from all occupied orbitals (and compare to total density)
    dens = results.get_density(grid=grid)
    dens2 = results.get_orbital_density(grid=grid, orbs={'A1': [1, 2, 3], 'B1': 1, 'B2': 1})
    diffdens = dens - dens2

    densint = dens.integral()
    dens2int = dens2.integral()
    diffdensint = diffdens.integral(lambda x: abs(x))
    print("     Integral of the density             ", densint)
    print("     Integral of the density (from orbs) ", dens2int)
    print("     Integral of the difference density  ", diffdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(diffdensint, 0.0, 6)
        if typ == 'cub':
            testobj.assert_(abs(densint - 10.0) < 0.41)
        if typ == 'adf':
            testobj.assertAlmostEqual(densint, 10.0, 3)

    # get density from (all) localized orbitals (using get orbital density)

    locdens = results.get_orbital_density(grid=grid, orbs={'LOC': [1, 2, 3, 4, 5]})
    locdiffdens = dens - locdens

    locdensint = locdens.integral()
    locdiffdensint = locdiffdens.integral(lambda x: abs(x))
    print("     Integral of the density (from localized orbs) ", locdensint)
    print("     Integral of the difference density            ", locdiffdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(locdiffdensint, 0.0, 6)

    # get density from (all) localized orbitals (now using get_locorb_density)

    locdens = results.get_density(grid=grid, orbs={'Loc': [1, 2, 3, 4, 5]})
    locdiffdens = dens - locdens

    locdensint = locdens.integral()
    locdiffdensint = locdiffdens.integral(lambda x: abs(x))
    print("     Integral of the density (from localized orbs) ", locdensint)
    print("     Integral of the difference density            ", locdiffdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(locdiffdensint, 0.0, 6)

    # get density from localized orbitals again, using get_locorb_density
    # (now calculated in two different batches)

    locdens1 = results.get_density(grid=grid, orbs={'Loc': [1, 2]})
    locdens2 = results.get_density(grid=grid, orbs={'Loc': [3, 4, 5]})
    locdens = locdens1 + locdens2
    locdiffdens = dens - locdens

    locdensint = locdens.integral()
    locdiffdensint = locdiffdens.integral(lambda x: abs(x))
    print("     Integral of the density (from localized orbs) ", locdensint)
    print("     Integral of the difference density            ", locdiffdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(locdiffdensint, 0.0, 6)

    # get density from localized orbital 1

    locdens1 = results.get_density(grid=grid, orbs={'Loc': [1]})
    locdens2 = results.get_orbital_density(grid=grid, orbs={'LOC': [1]})
    locdiffdens = locdens1 - locdens2

    locdens1_int = locdens1.integral()
    locdens2_int = locdens2.integral()
    locdiffdensint = locdiffdens.integral(lambda x: abs(x))
    print("     Integral of the locdens 1 ", locdens1_int)
    print("     Integral of the locdens 2 ", locdens2_int)
    print("     Integral of the difference density            ", locdiffdensint)

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(locdiffdensint, 0.0, 6)
