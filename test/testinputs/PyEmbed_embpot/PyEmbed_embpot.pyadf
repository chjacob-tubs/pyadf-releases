import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

from pyadf.Plot.FileReaders import GridFunctionReader
from pyadf.Plot.GridFunctions import GridFunctionFactory


def main():
    embed_settings = EmbedXCFunSettings()
    embed_settings.set_fun_nad_xc({'lda': 1.0})
    embed_settings.set_fun_nad_kin({'tfk': 1.0})

    embed_settings.show_functionals()

    embed_eval = EmbedXCFunEvaluator(settings=embed_settings)

    print()
    print("Subsystem A:")

    grid_A, ve_A, density_A = \
        GridFunctionReader.read_density_elpot_xyzwv(os.path.join(pyadfenv.outdir, 'FRZDNS.a.txt'))
    nel_A = density_A[0].integral()
    print("Integrated number of electrons for subsystem A:", nel_A)

    print()
    print("Subsystem B:")

    grid_B, ve_B, density_B = \
        GridFunctionReader.read_density_elpot_xyzwv(os.path.join(pyadfenv.outdir, 'FRZDNS.b.txt'))
    nel_B = density_B[0].integral()
    print("Integrated number of electrons in B:", nel_B)

    print()
    print("1. Evaluation of the embedding potential in two steps:")
    print("   a. getting the non-additive potential")

    nadpot_A = embed_eval.get_nad_pot(density_A, density_B)
    nadpot_B = embed_eval.get_nad_pot(density_B, density_A)

    print("   b. adding the electrostatic potential")

    embpot_A_2 = ve_B + nadpot_A
    embpot_B_2 = ve_A + nadpot_B

    print("   c. Exporting the potential to file")

    print()
    print("2. Evaluation of the embedding potential in one step, exporting to file")

    embpot_A_1 = embed_eval.get_emb_pot(density_A, density_B, ve_B)
    embpot_B_1 = embed_eval.get_emb_pot(density_B, density_A, ve_A)

    refpot_A = \
        GridFunctionFactory.newGridFunctionFromFile(os.path.join(pyadfenv.outdir, 'EMBPOT.A.txt'),
                                                    file_format='xyzwv', gf_type='potential')
    refpot_B = \
        GridFunctionFactory.newGridFunctionFromFile(os.path.join(pyadfenv.outdir, 'EMBPOT.B.txt'),
                                                    file_format='xyzwv', gf_type='potential')

    if 'unittesting' in pyadfenv.options:
        testobj.assertAlmostEqual(embpot_A_1.values, refpot_A.values, 6)
        testobj.assertAlmostEqual(embpot_A_2.values, refpot_A.values, 6)
        testobj.assertAlmostEqual(embpot_B_1.values, refpot_B.values, 6)
        testobj.assertAlmostEqual(embpot_B_2.values, refpot_B.values, 6)


main()
