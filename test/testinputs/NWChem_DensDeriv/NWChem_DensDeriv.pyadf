import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

######################################################################
#
# PyADF test NWChem Density
#
# Test and demonstrate calculation of density and potential
#
######################################################################

import numpy as np

m_h2o = molecule(os.path.join(pyadfenv.outdir, 'H2O.xyz'))
m_h2o.set_symmetry('NOSYM')

# Cube grid
cgrid = cubegrid(m_h2o, spacing=0.1)

settings = nwchemsettings(method='DFT', functional='becke88 perdew86')
r_h2o = nwchemsinglepointjob(m_h2o, 'cc-pVDZ', settings=settings).run()

dens = r_h2o.get_density(grid=cgrid, order=2)

# test nonfrozen density
dens_nfr = r_h2o.get_nonfrozen_density(grid=cgrid, order=2)

if 'unittesting' in pyadfenv.options:
    np.testing.assert_almost_equal(dens[0].values, dens_nfr[0].values)
    np.testing.assert_almost_equal(dens[1].values, dens_nfr[1].values)
    np.testing.assert_almost_equal(dens[2].values, dens_nfr[2].values)

# test density again
int_dens = dens[0].integral()
print("Integral of density (ADF grid): ", int_dens)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens, 9.841335, 4)

# test sqrgradient vs. density derivatives
sqrgrad = r_h2o.get_sqrgradient(grid=cgrid)
sqrgrad_from_dens = dens[1].values[:, 0]**2 + dens[1].values[:, 1]**2 + dens[1].values[:, 2]**2
diff = np.abs(sqrgrad.values - sqrgrad_from_dens)

if 'unittesting' in pyadfenv.options:
    np.testing.assert_array_less(diff, 1.0e-8)

# test Laplacian vs. density Hessian
lapl = r_h2o.get_laplacian(grid=cgrid)
lapl_from_dens = dens[2].values[:, 0] + dens[2].values[:, 3] + dens[2].values[:, 5]
diff = np.abs(lapl.values - lapl_from_dens)

if 'unittesting' in pyadfenv.options:
    np.testing.assert_array_less(diff, 1.0e-8)

# Coulomb and nuclear potential
coulpot = r_h2o.get_potential(grid=cgrid, pot='coul')
nucpot = r_h2o.get_potential(grid=cgrid, pot='nuc')

# test nonfrozen potentials
coulpot_nfr = r_h2o.get_nonfrozen_potential(grid=cgrid, pot='coul')
nucpot_nfr = r_h2o.get_nonfrozen_potential(grid=cgrid, pot='nuc')

if 'unittesting' in pyadfenv.options:
    np.testing.assert_almost_equal(coulpot.values, coulpot_nfr.values)
    np.testing.assert_almost_equal(nucpot.values, nucpot_nfr.values)

# test electrostatic potential

elstatpot = r_h2o.get_potential(grid=cgrid, pot='elstat')

if 'unittesting' in pyadfenv.options:
    np.testing.assert_almost_equal(elstatpot.values, coulpot.values + nucpot.values)
