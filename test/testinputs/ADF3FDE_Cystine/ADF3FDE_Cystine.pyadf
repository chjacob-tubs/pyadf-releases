import math
import copy
import numpy

supermol = molecule (os.path.join(pyadfenv.outdir, 'cys_cys.pdb'), 'pdb')
supermol.set_spin(0)

settings = adfsettings()
settings.set_functional('BP86')
settings.set_integration(accint=2.0)

basis = 'SZ'
core = 'Large'

# supermolecule calculation
supermol_results = adfsinglepointjob(supermol, basis, core=core, settings=settings).run()
supermol_dipole = supermol_results.get_dipole_vector()

frags = cappedfragmentlist()
frags.partition_protein(supermol)
                         
# MFCC calculation
mfcc_results = adfmfccjob(frags, basis, core=core, settings=settings).run()
mfcc_dipole = mfcc_results.get_dipole_vector()
mfcc_frags = mfcc_results.get_fragmentlist()

# 3-FDE (0) calculation
# settings.set_ncycles(1000)
# settings.set_mixing(0.1)
# settings.set_convergence(converge=1.0e-4)
fde_results = adf3fdejob(mfcc_frags, basis, core=core, settings=settings,
                          fde={'RHO1FITTED': '', 'CapDensConv': 1e-3},
                          fdeoptions={'DENSTYPE': 'SCFfitted'}).run()

fde_dipole = fde_results.get_dipole_vector()
fde_dens= fde_results.get_density(spacing=0.2, fit=True)

supermol_dens = supermol_results.get_density(grid=fde_dens.grid, fit=True)

diff_dens = fde_dens - supermol_dens
diff_dens.get_cubfile(os.path.join(pyadfenv.outdir, 'diff-dens.cub'))

print "Dipole moment (a.u.): " 
print "Supermolecule: ", supermol_dipole
print "MFCC:          ", mfcc_dipole
print "3-FDE:         ", fde_dipole
print

sqrt_error = math.sqrt(diff_dens.integral(func=lambda x: x*x))
abs_error = diff_dens.integral(func=lambda x: abs(x))

print " fde Diff Dens Int        : ", diff_dens.integral()
print " fde Diff Dens Int (Sqr.) : ", sqrt_error
print " fde Diff Dens Int (Abs.) : ", abs_error

testobj.assertAlmostEqual (sqrt_error, 0.00642199, 5)
testobj.assertAlmostEqual (abs_error,  0.07751428, 5)

testobj.assertAlmostEqual([-0.38075312, -0.45339314,  0.17361172], supermol_dipole, 4)
testobj.assertAlmostEqual([-0.37046423, -0.46913504,  0.19081185], mfcc_dipole, 4)
testobj.assertAlmostEqual([-0.41064079, -0.46165078,  0.22611683], fde_dipole, 4)

