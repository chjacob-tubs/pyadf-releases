import math

supermol = molecule(os.path.join(pyadfenv.outdir, 'cys_cys.pdb'), 'pdb')
supermol.set_spin(0)

basis = 'SZ'
core = 'Large'

settings = adfsettings(zlmfit=False)
settings.set_functional('BP86')
settings.set_integration(accint=4.0)
settings.set_save_tapes([21, 10])

settings.set_ncycles(1)  # do not converge SCF, we only need the grid
supermol_results = adfsinglepointjob(supermol, basis, core=core, settings=settings).run()
agrid = adfgrid(supermol_results)

settings = adfsettings(zlmfit=False)
settings.set_functional('BP86')
settings.set_integration(accint=2.0)

# supermolecule calculation
supermol_results = adfsinglepointjob(supermol, basis, core=core, settings=settings).run()
supermol_dipole = supermol_results.get_dipole_vector()

frags = cappedfragmentlist()
frags.partition_protein(supermol)
                         
# MFCC calculation
mfcc_results = adfmfccjob(frags, basis, core=core, settings=settings).run()
mfcc_dipole = mfcc_results.get_dipole_vector()
mfcc_dens = mfcc_results.get_density(grid=agrid)

mfcc_frags = mfcc_results.get_fragmentlist()

# 3-FDE (0) calculation
fde_results = adf3fdejob(mfcc_frags, basis, core=core, settings=settings,
                          fde={'RHO1FITTED': '', 'CapDensConv': 1e-3},
                          fdeoptions={'DENSTYPE': 'SCFfitted'}).run()

fde_dipole = fde_results.get_dipole_vector()
fde_dens = fde_results.get_density(grid=agrid, fit=True)

supermol_dens = supermol_results.get_density(grid=agrid, fit=True)

# first test supermol, MFCC, 3-FDE densities and potentials

testobj.assertAlmostEqual(supermol_dens.integral(), 126.0, 2)
testobj.assertAlmostEqual(mfcc_dens.integral(), 126.0, 2)
testobj.assertAlmostEqual(fde_dens.integral(), 126.0, 2)

mfcc_fitdens = mfcc_results.get_density(grid=agrid, fit=True)
fde_fitdens = fde_results.get_density(grid=agrid, fit=True)

testobj.assertAlmostEqual(mfcc_fitdens.integral(), 126.0, 2)
testobj.assertAlmostEqual(fde_fitdens.integral(), 126.0, 2)

supermol_nucpot = supermol_results.get_potential(pot='nuc')

supermol_coulpot = supermol_results.get_potential(pot='coul')
mfcc_coulpot = mfcc_results.get_potential(pot='coul')
fde_coulpot = fde_results.get_potential(pot='coul')

elnuc_super = (supermol_coulpot * supermol_nucpot).integral()
elnuc_mfcc = (mfcc_coulpot * supermol_nucpot).integral()
elnuc_fde = (fde_coulpot * supermol_nucpot).integral()

print "Electon-Nuclear interaction energy (a.u.)"
print "Supermolecule: ", elnuc_super
print "MFCC:          ", elnuc_mfcc - elnuc_super
print "3-FDE:         ", elnuc_fde - elnuc_super
print

testobj.assertAlmostEqual(elnuc_super, -1261649.2420240438, 4)
testobj.assertAlmostEqual(elnuc_mfcc - elnuc_super, 11.236410662, 4)
testobj.assertAlmostEqual(elnuc_fde - elnuc_super, 18.465913598, 4)

# second, test dipole moments

print "Dipole moment (a.u.): "
print "Supermolecule: ", supermol_dipole
print "MFCC:          ", mfcc_dipole
print "3-FDE:         ", fde_dipole
print

testobj.assertAlmostEqual([-0.38075328, -0.45339284,  0.17361213], supermol_dipole, 4)
testobj.assertAlmostEqual([-0.37046405, -0.46913567,  0.19081197], mfcc_dipole, 4)
testobj.assertAlmostEqual([-0.41064078, -0.46165079,  0.22611683], fde_dipole, 4)

# now finally test 3-FDE difference densities and potential

diff_dens = fde_dens - supermol_dens

sqrt_error = math.sqrt(diff_dens.integral(func=lambda x: x*x))
abs_error = diff_dens.integral(func=lambda x: abs(x))

print " fde Diff Dens Int        : ", diff_dens.integral()
print " fde Diff Dens Int (Sqr.) : ", sqrt_error
print " fde Diff Dens Int (Abs.) : ", abs_error

testobj.assertAlmostEqual(sqrt_error, 0.00635101, 5)
testobj.assertAlmostEqual(abs_error,  0.07764864, 5)

