import os
from itertools import chain

from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

##########################################
# Ca(2+)(H2O)5 cluster
##########################################

ca_h2o5 = molecule(os.path.join(pyadfenv.outdir, 'ca-h2o5.xyz'))
pc_list = ca_h2o5.get_tip3p_pointcharges()

pc_list_ref = [[-0.0000004228,  0.0000002180, -2.3432022717, -0.834],
               [-0.0000002929, -0.7569500560, -2.9290846162, +0.417],
               [-0.0000008160,  0.7569505980, -2.9290844792, +0.417],
               [0.0000005272,   2.3634235782,  0.5997486572, -0.834],
               [-0.7569496738,  2.9348869874,  0.7289299408, +0.417],
               [0.7569509802,   2.9348865645,  0.7289303348, +0.417],
               [-0.0000003742, -2.3634236656,  0.5997483952, -0.834],
               [-0.7569508171, -2.9348866578,  0.7289301056, +0.417],
               [0.7569498369,  -2.9348870951,  0.7289295305, +0.417],
               [-2.3925616267,  0.0000003886,  0.4943933175, -0.834],
               [-3.0908928900,  0.0000001653, -0.1602556614, +0.417],
               [-2.8512170629,  0.0000007784,  1.3345522487, +0.417],
               [2.3925618060,  -0.0000004868,  0.4943928200, -0.834],
               [3.0908929409,  -0.0000001937, -0.1602562959, +0.417],
               [2.8512174070,  -0.0000010209,  1.3345516612, +0.417],
               [0.0000000459,  -0.0000000147,  0.0768140635, +2.0]]

if 'unittesting' in pyadfenv.options:
    testobj.assertEqual(pc_list, pc_list_ref)

##########################################
# F(-)(H2O)10 cluster
##########################################

f_h2o10 = molecule(os.path.join(pyadfenv.outdir, 'fwater10-1.xyz'))
pc_list = f_h2o10.get_tip3p_pointcharges()

# now check only charges, not coordinates
pcs = [p[3] for p in pc_list]
pcs_ref = [-0.834, +0.417, +0.417] * 10 + [-1.0]

if 'unittesting' in pyadfenv.options:
    testobj.assertEqual(pcs, pcs_ref)

##########################################
# (OH-)(H2O)2 cluster
##########################################

oh_h2o2 = molecule(os.path.join(pyadfenv.outdir, 'OH_H2O2_1.xyz'))
oh_h2o2_mols = oh_h2o2.separate()

pc_list = list(chain.from_iterable([m.get_tip3p_pointcharges() for m in oh_h2o2_mols]))

pc_list_ref = [[-3.0127146164, -1.7176722934,  0.6146011589, -1.183],
               [-2.6699649548, -2.5899212829,  0.3954270807, +0.183],
               [-1.5729917613,  0.0561299424, -0.5462979233, -0.834],
               [-1.1868438182,  0.4823137605,  0.2227460192, +0.417],
               [-2.1631404116, -0.6772961393, -0.1110022266, +0.417],
               [-5.5788497461, -1.8182208368,  0.6974488765, -0.834],
               [-4.5449318788, -1.8014327999,  0.6877830524, +0.417],
               [-5.7903828127, -1.3159303505, -0.0933660378, +0.417]]

if 'unittesting' in pyadfenv.options:
    testobj.assertEqual(pc_list, pc_list_ref)

##########################################
# (H3O+)(H2O)2 cluster
##########################################

h2o2 = molecule(os.path.join(pyadfenv.outdir, 'H2O2_1.xyz'))
h3o_h2o2_mols = h2o2.separate()

h3o = molecule(os.path.join(pyadfenv.outdir, 'h3o.xyz'))
h3o_h2o2_mols.append(h3o)

pc_list = list(chain.from_iterable([m.get_tip3p_pointcharges() for m in h3o_h2o2_mols]))

pc_list_ref = [[-0.02699, -0.46263,  2.07060, -0.834],
               [-0.75227, -0.37831,  2.70107, +0.417],
               [0.73559,  -0.78877,  2.56227, +0.417],
               [-0.02699, -0.46262, -2.07060, -0.834],
               [-0.75228, -0.37841, -2.70106, +0.417],
               [0.73563,  -0.78865, -2.56227, +0.417],
               [-0.02267,  0.91599,  0.00001, -0.571],
               [0.03139,   0.35794,  0.87288, +0.524],
               [0.60226,   1.65397, -0.00002, +0.524],
               [0.03133,   0.35794, -0.87287, +0.524]]

if 'unittesting' in pyadfenv.options:
    testobj.assertEqual(pc_list, pc_list_ref)

