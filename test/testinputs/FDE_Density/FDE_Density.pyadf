import math
import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

file_h2o_1 = os.path.join(pyadfenv.outdir, 'FDE-H2O-1.xyz')
file_h2o_2 = os.path.join(pyadfenv.outdir, 'FDE-H2O-2.xyz')
file_mol = os.path.join(pyadfenv.outdir, 'FDE-mol.xyz')

m_h2o_1 = molecule(file_h2o_1)
m_h2o_2 = molecule(file_h2o_2)
m_mol = molecule(file_mol)

m_tot = m_mol + m_h2o_1 + m_h2o_2

print(m_tot.print_coordinates())

# Prepare first water molecule
r_h2o_1 = adfsinglepointjob(m_h2o_1, 'SZ', options=['NOSYMFIT']).run()

# Prepare second water molecule
r_h2o_2 = adfsinglepointjob(m_h2o_2, 'SZ', options=['NOSYMFIT']).run()

# run supermolecule calculation

# save TAPE10 for later use of the integration grid
settings = adfsettings()
settings.set_save_tapes([21, 10])

# build from fragments to ensure that the supermolecule
# calculation has the same symmetry (and orientation) as
# the FDE calculation below.
# The easier way would be to use NOSYM, but we also want 
# to test the symmetry handling here.
frags = [fragment(r_h2o_1, [m_h2o_1]),
         fragment(r_h2o_2, [m_h2o_2]),
         fragment(None, [m_mol])]
r_supermol = adffragmentsjob(frags, basis='SZ', settings=settings).run()

###################################################################################
# run FDE calculation
frags = [fragment(r_h2o_1, [m_h2o_1], isfrozen=True),
         fragment(r_h2o_2, [m_h2o_2], isfrozen=True),
         fragment(None, [m_mol])]

fde_res = adffragmentsjob(frags, basis="SZ").run()

# A) density on cubegid for plotting

cgrid = cubegrid(r_supermol.get_molecule(), spacing=0.2)

supermol_dens = r_supermol.get_density(grid=cgrid)
# this gets the total density.
# for the active system only, use get_nonfrozen_density,
# for the forzen system only, use get_frozen_density
fde_dens = fde_res.get_density(grid=cgrid)

diffdens = fde_dens - supermol_dens

# save difference density to cube file
supermol_dens.get_cubfile(os.path.join(pyadfenv.outdir, 'superdens.cub'))
fde_dens.get_cubfile(os.path.join(pyadfenv.outdir, 'fdedens.cub'))
diffdens.get_cubfile(os.path.join(pyadfenv.outdir, 'diffdens.cub'))

# B) density on ADF grid for integration

agrid = adfgrid(r_supermol)

supermol_dens = r_supermol.get_density(grid=agrid)
# this gets the total density.
# for the active system only, use get_nonfrozen_density,
# for the frozen system only, use get_frozen_density
fde_dens = fde_res.get_density(grid=agrid)

diffdens = fde_dens - supermol_dens

integ = diffdens.integral()
abserr = diffdens.integral(lambda x: abs(x))
rmserr = math.sqrt(diffdens.integral(lambda x: x * x))

print("Integral of difference density: ", integ)
print("Integrated absolute error:      ", abserr)
print("Integrated RMS error:           ", rmserr)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(integ, 0.000000, 4)
    testobj.assertAlmostEqual(abserr, 0.200471, 4)
    testobj.assertAlmostEqual(rmserr, 0.029052, 4)

###################################################################################
# now run the FDE calculation with freeze-and-thaw 

# FDE with freeze-and-thaw
frags = [fragment(r_h2o_1, [m_h2o_1], isfrozen=True, fdeoptions={'RELAX': ''}),
         fragment(r_h2o_2, [m_h2o_2], isfrozen=True, fdeoptions={'RELAX': ''}),
         fragment(None, [m_mol])]
fde_res = adffragmentsjob(frags, basis="SZ", fde={'RELAXCYCLES': 5}).run()

fde_dens = fde_res.get_density(grid=agrid)

diffdens = fde_dens - supermol_dens

integ = diffdens.integral()
abserr = diffdens.integral(lambda x: abs(x))
rmserr = math.sqrt(diffdens.integral(lambda x: x * x))

print("Integral of difference density: ", integ)
print("Integrated absolute error:      ", abserr)
print("Integrated RMS error:           ", rmserr)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(integ, 0.000000, 4)
    testobj.assertAlmostEqual(abserr, 0.186308, 4)
    testobj.assertAlmostEqual(rmserr, 0.028706, 4)
