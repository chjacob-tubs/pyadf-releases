import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

# set up pathNames
name1 = os.path.join(pyadfenv.startdir, 'H2O-H2O')
name2 = os.path.join(pyadfenv.startdir, 'HF-HF')
pathNames = [name1, name2]

# set up adf
settings = adfsettings()
settings.set_integration(3.0)
settings.set_functional('PBE')
settings.set_ZORA(ZORA=False)

# set up adffde
fdesettings = adffdesettings()
fdesettings.set_occupations(None)
fdesettings.set_lshift(None)
fdesettings.set_packtape(False)

# set up adffdeanalysis Settings
fdeanalysissettings = adffdeanalysissettings()
fdeanalysissettings.set_runtype(['normalFt'])
fdeanalysissettings.set_tnad(['PBE2'])
fdeanalysissettings.set_ncycle(2)

diffjob = datasetjob(pathNames, basis='DZ',
                     settings=fdeanalysissettings, adfsettings=settings,
                     adffdesettings=fdesettings)
diffresults = diffjob.run()

(avrg, dataSetJobResults) = diffresults

diffPrints = diffjob.print_results()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(avrg['PBE2'][0][0], 0.453384, 4)
    testobj.assertAlmostEqual(avrg['PBE2'][0][2], 0.006664, 4)
    testobj.assertAlmostEqual(avrg['PBE2'][0][3], 0.001037, 4)
    testobj.assertAlmostEqual(avrg['PBE2'][1][0], 0.321176, 4)
    testobj.assertAlmostEqual(avrg['PBE2'][1][2], 0.007785, 4)
    testobj.assertAlmostEqual(avrg['PBE2'][1][3], 0.001172, 4)
