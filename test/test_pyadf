#!/usr/bin/env python3

# This file is part of
# PyADF - A Scripting Framework for Multiscale Quantum Chemistry.
# Copyright (C) 2006-2022 by Christoph R. Jacob, Tobias Bergmann,
# S. Maya Beyhan, Julia Br√ºggemann, Rosa E. Bulo, Maria Chekmeneva,
# Thomas Dresselhaus, Kevin Focke, Andre S. P. Gomes, Andreas Goetz, 
# Michal Handzlik, Karin Kiewisch, Moritz Klammler, Lars Ridder, 
# Jetze Sikkema, Lucas Visscher, Johannes Vornweg and Mario Wolter.
#
#    PyADF is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyADF is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyADF.  If not, see <https://www.gnu.org/licenses/>.

import sys
import os

import unittest

from pyadf_doctests import make_doctest_suite
from pyadf_testinputs import make_testinputs_suite
from pyadf_unittests.PyAdfTestCase import PyAdfTextTestRunner


def get_options():
    from optparse import OptionParser

    parser = OptionParser(usage="usage: %prog [options]")

    parser.add_option("--tests", default="all",
                      dest="tests",
                      help="which tests to run [available: doctests, unittests, "
                           "short, medium, long, all, software name]")
    parser.add_option("--nodoctests", action="store_false", default=True,
                      dest="doctests", help="skip doc tests")
    parser.add_option("--nounittests", action="store_false", default=True,
                      dest="unittests", help="skip unit tests")
    parser.add_option("--noopenbabel", action="store_false", default=True,
                      dest="openbabel", help="skip tests relying on Openbabel")
    parser.add_option("--nodalton", action="store_false", default=True,
                      dest="dalton", help="skip Dalton tests")
    parser.add_option("--noadf", action="store_false", default=True,
                      dest="adf", help="skip ADF tests")
    parser.add_option("--nodirac", action="store_false", default=True,
                      dest="dirac", help="skip Dirac tests")
    parser.add_option("--noespresso", action="store_false", default=True,
                      dest="espresso", help="skip Quantum Espresso tests")
    parser.add_option("--nomolcas", action="store_false", default=True,
                      dest="molcas", help="skip Molcas tests")
    parser.add_option("--nonwchem", action="store_false", default=True,
                      dest="nwchem", help="skip NWChem tests")
    parser.add_option("--noturbomole", action="store_false", default=True,
                      dest="turbomole", help="skip Turbomole tests")
    parser.add_option("--noorca", action="store_false", default=True,
                      dest="orca", help="skip Orca tests")
    parser.add_option("--nokf", action="store_false", default=True,
                      dest="kftest", help="skip kf tests")
    parser.add_option("--singletest", default=None,
                      dest="singletest", help="name of one specific test to run")
    parser.add_option("--molclass", choices=["openbabel", "obfree", "rdkit"], default=None,
                      help="select molecule class to use [available: openbabel, rdkit, obfree]")
    parser.add_option("--jobrunnerconf", "-c", action="store", type='string', metavar='FILE', default=None,
                      dest="jobrunnerconf", help="set job runner configuration file [default: $HOME/.pyadfconfig]")
    parser.add_option("--keep", "-k", action="store_true", default=False,
                      dest="keep", help="keep temporary test directories")
    parser.add_option("--profile", "-p", action="store_true", default=False,
                      dest="profile", help="run tests using the Python profiler")
    parser.add_option("--timings", "-t", action="store_true", default=False,
                      dest="timing_report", help="print a timing report after running tests")

    (options, args) = parser.parse_args()

    if options.jobrunnerconf is not None:
        options.jobrunnerconf = os.path.abspath(options.jobrunnerconf)

    return options


def test():
    options = get_options()

    suite = unittest.TestSuite()

    if options.singletest:
        suite.addTest(make_testinputs_suite(testnames=[options.singletest],
                                            keep=options.keep, prof=options.profile,
                                            molclass=options.molclass,
                                            jobrunnerconf=options.jobrunnerconf))
    else:
        if options.tests in ["doctests", "unittests"]:
            options.doctests = False
            options.unittests = False

        if options.tests == "doctests" or options.doctests:  # add doctests
            doctests = make_doctest_suite(molclass=options.molclass)
            if doctests is not None:
                suite.addTest(doctests)

        if options.tests == "unittests" or options.unittests:  # add unittests
            import kf
            from pyadf.JobRunnerConfiguration import JobRunnerConfiguration
            from pyadf.ADFBase import scmjob

            # we need to set up the JobRunner configuration for the KF module
            job_runner_conf = JobRunnerConfiguration(conffile=options.jobrunnerconf,
                                                     jobbasedir=os.getcwd())
            kf.setup_kf_environment(job_runner_conf.get_environ_for_class(scmjob))

            # suite.addTest(unittest.TestLoader().loadTestsFromTestCase(kf.KFFileTests))

            import pyadf_unittests
            suite.addTest(unittest.TestLoader().loadTestsFromModule(pyadf_unittests))

        if not (options.tests in ["doctests", "unittests"]):
            suite.addTest(make_testinputs_suite(tests=options.tests,
                                                dalton=options.dalton,
                                                adf=options.adf,
                                                dirac=options.dirac,
                                                nwchem=options.nwchem,
                                                espresso=options.espresso,
                                                molcas=options.molcas,
                                                turbomole=options.turbomole,
                                                orca=options.orca,
                                                openbabel=options.openbabel,
                                                keep=options.keep, prof=options.profile,
                                                molclass=options.molclass,
                                                jobrunnerconf=options.jobrunnerconf))

    res = PyAdfTextTestRunner(print_timing_report=options.timing_report).run(suite)
    return res


if __name__ == '__main__':
    ret = not test().wasSuccessful()
    sys.exit(ret)
