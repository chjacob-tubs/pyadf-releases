#!/usr/bin/env python3

# This file is part of
# PyADF - A Scripting Framework for Multiscale Quantum Chemistry.
# Copyright (C) 2006-2024 by Christoph R. Jacob, Tobias Bergmann,
# S. Maya Beyhan, Julia Brüggemann, Rosa E. Bulo, Maria Chekmeneva,
# Thomas Dresselhaus, Kevin Focke, Andre S. P. Gomes, Andreas Goetz,
# Michal Handzlik, Karin Kiewisch, Moritz Klammler, Lars Ridder,
# Jetze Sikkema, Lucas Visscher, Johannes Vornweg, Michael Welzel,
# and Mario Wolter.
#
#    PyADF is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyADF is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyADF.  If not, see <https://www.gnu.org/licenses/>.

import os
import sys
import traceback
from importlib.resources import files as resourcefiles

try:
    import cProfile as profile
except ImportError:
    profile = None

from pyadf import *
from pyadf.Initialization.pyadfenv import setup_pyadfenv, setup_test_pyadfenv

if os.path.basename(sys.argv[0]) == 'pyadf':
    pyadfenv = setup_pyadfenv()
else:
    # noinspection PyUnresolvedReferences
    pyadfenv = setup_test_pyadfenv(pyadfinput, testing_molclass, testing_jobrunnerconf, testing_save_results)

stdout_save = sys.stdout
stderr_save = sys.stderr

if 'interactive' not in pyadfenv.options:
    # redirect PyADF output to a file
    sys.stdout = open(pyadfenv.pyadfout, 'w', encoding='utf-8', buffering=1)
    sys.stderr = sys.stdout

print()
print(" " + 85 * "*")
print(" *                                          ")
print(" *  PyADF v" + VersionInfo.version)
VersionInfo.print_version_from_git()

print(" *")
print(" *  PyADF - A Scripting Framework for Multiscale Quantum Chemistry.")
print(" *  Copyright (C) 2006-2024 by Christoph R. Jacob, Tobias Bergmann,")
print(" *  S. Maya Beyhan, Julia Brüggemann, Rosa E. Bulo, Maria Chekmeneva,")
print(" *  Thomas Dresselhaus, Kevin Focke, Andre S. P. Gomes, Andreas Goetz,")
print(" *  Michal Handzlik, Karin Kiewisch, Moritz Klammler, Lars Ridder,")
print(" *  Jetze Sikkema, Lucas Visscher, Johannes Vornweg, Michael Welzel,")
print(" *  and Mario Wolter.")

print(" *")
print(" *      PyADF is free software: you can redistribute it and/or modify")
print(" *      it under the terms of the GNU General Public License as published by")
print(" *      the Free Software Foundation, either version 3 of the License, or")
print(" *      (at your option) any later version.")
print(" *")
print(" *      PyADF is distributed in the hope that it will be useful,")
print(" *      but WITHOUT ANY WARRANTY; without even the implied warranty of")
print(" *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the")
print(" *      GNU General Public License for more details.")
print(" *")
print(" *      You should have received a copy of the GNU General Public License")
print(" *      along with PyADF.  If not, see <https://www.gnu.org/licenses/>.")
print(" *")
print(" " + 85 * "*")
print()

# directory where the pyadf source is
print(" Directory of PyADF source:")
print("     ", resourcefiles('pyadf'))
print()

VersionInfo.print_git_version_info()

pyadfenv.print_summary()

# print the input file
f = open(pyadfenv.inputname, encoding='utf-8')
for ll in f.readlines():
    if ll.strip(' \n\r') != "":
        print(ll, end=' ')
print(" " + 40 * "-")
print()
f.close()

# initialize file manager
myfiles = adf_filemanager(pyadfenv.outdir, pyadfenv.jobid)
myfiles.outputfilename = "alloutput"

if "restartdir" in pyadfenv.options:
    print(" Using restart directory: ", pyadfenv.options["restartdir"])
    myfiles.import_resultsdir(pyadfenv.options["restartdir"])

# initialize MoleculeFactory
MoleculeFactory().use_molclass(pyadfenv.options["molclass"])

print(" " + 40 * "-")
print(" Molecule class command line option: ", pyadfenv.options["molclass"])
print(" Molecule class used: ", type(molecule()))
print()

VersionInfo.print_package_versions()

# initialize JobRunner
DefaultJobRunner.instance = None
job_runner_conf = JobRunnerConfiguration(conffile=pyadfenv.options['jobrunner_conffile'],
                                         jobbasedir=pyadfenv.outdir)
DefaultJobRunner(conf=job_runner_conf)

# initialize KF module
kf.setup_kf_environment(DefaultJobRunner().get_environ_for_local_command(scmjob))

print(" " + 40 * "-")
DefaultJobRunner().print_configuration()
print()

print(" " + 50 * "*")
print(" Executing PyADF input ...")
print()

# noinspection PyBroadException
try:
    globs = globals().copy()
    globs.update(locals())

    with open(pyadfenv.inputname, "rb") as fin:
        source = fin.read()
    code = compile(source, pyadfenv.inputname, "exec")

    if "profile" not in pyadfenv.options:
        exec(code, globs, globs)
    else:
        profout = os.path.join(pyadfenv.outdir, "pyadf_profiling." + pyadfenv.jobid + ".profile")
        print("Profile will be written to: ", profout)
        profile.runctx(code, globs, globs, profout)

    print(" " + 50 * "*")
    print(" Finished Execution of PyADF input")

except Exception as e:

    print(" Error termination in PyADF")
    print()
    traceback.print_exception(*sys.exc_info())
    print()
    if myfiles.have_results():
        crashdir = os.path.join(pyadfenv.outdir, "pyadf_crashed." + pyadfenv.jobid)
        os.mkdir(crashdir)
        myfiles.copy_all_results_to_dir(crashdir)
        print(" Results were saved to: ", "pyadf_crashed." + pyadfenv.jobid)
        print()

    if 'unittesting' in pyadfenv.options:
        myfiles.cleanup()
        sys.stdout = stdout_save
        sys.stderr = stderr_save
        pyadfenv.cleanup()
        del pyadfenv
        raise

else:

    if 'save_results' in pyadfenv.options:
        if myfiles.have_results():
            savedir = os.path.join(pyadfenv.outdir, "pyadf_results." + pyadfenv.jobid)
            os.mkdir(savedir)
            myfiles.copy_all_results_to_dir(savedir)
            print(" Results were saved to: ", "pyadf_results." + pyadfenv.jobid)
            print()
        else:
            print(' There are no results to be saved')
    else:
        print(" Saving results not requested (use -s or set pyadfenv.options['save_results'])")

myfiles.cleanup()
sys.stdout = stdout_save
sys.stderr = stderr_save
pyadfenv.cleanup()
