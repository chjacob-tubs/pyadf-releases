import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

import numpy as np

fde_settings = adfsettings()
fde_settings.set_save_tapes([21, 10])
fde_settings.set_functional('LDA')
fde_settings.ncycles = 1000
fde_settings.set_occupations(['KEEPORBITALS=' + str(fde_settings.ncycles)])
fde_settings.set_integration(accint=4.0, acclist=[4.0, 4.0])

# other options
basis_active = "DZP"
gen_sym_opts = ['NOSYM', 'NOSYMFIT']
gen_fde_opts = gen_sym_opts
fde_act_opts = {'FULLGRID': '', 'RELAXCYCLES': 5, 'TNAD': 'THOMASFERMI', 'ENERGY': ''}
fde_frz_opts = {"RELAX": ""}

file_h2o = os.path.join(pyadfenv.outdir, 'H2O.xyz')
file_nh3 = os.path.join(pyadfenv.outdir, 'NH3.xyz')

m_h2o = molecule(file_h2o)
m_nh3 = molecule(file_nh3)

m_tot = m_h2o + m_nh3

print(m_tot.print_coordinates())

adf_settings = adfsettings(functional='LDA')
adf_settings.set_save_tapes([21, 10])

r_tot = adfsinglepointjob(m_tot, basis_active, settings=adf_settings, options=['NOSYMFIT']).run()
agrid = adfgrid(r_tot)

###
# FDE with freeze-and-thaw, h2o active

r_h2o = adfsinglepointjob(m_h2o, basis_active, options=['NOSYMFIT', 'TOL 1e-3']).run()
r_nh3 = adfsinglepointjob(m_nh3, basis_active, options=['NOSYMFIT', 'TOL 1e-3']).run()

frags = [fragment(None, [m_h2o]),
         fragment(r_nh3, [m_nh3], isfrozen=True, fdeoptions=fde_frz_opts)]

fde_res = adffragmentsjob(frags, basis_active, settings=fde_settings, fde=fde_act_opts,
                          options=gen_fde_opts).run()

fde_dens_h2o = fde_res.get_nonfrozen_density(grid=agrid, fit=False, order=2)
fde_elpot_h2o = fde_res.get_nonfrozen_potential(grid=agrid, pot='nuc') \
                + fde_res.get_nonfrozen_potential(grid=agrid, pot='coul')

fde_dens_nh3 = fde_res.get_frozen_density(grid=agrid, fit=False, order=2)
fde_elpot_nh3 = fde_res.get_frozen_potential(grid=agrid, pot='nuc') \
                + fde_res.get_frozen_potential(grid=agrid, pot='coul')

fde_embpot = fde_res.get_embedding_potential(grid=agrid).values

###
# using pyembed to calculate the embedding potentials from the densities

embed_settings = EmbedXCFunSettings()
embed_settings.set_fun_nad_xc({'lda': 1.0})
embed_settings.set_fun_nad_kin({'tfk': 1.0})

embed_settings.show_functionals()

embed_eval = EmbedXCFunEvaluator(settings=embed_settings)

embpot_h2o_dd = embed_eval.get_emb_pot(fde_dens_h2o, fde_dens_nh3, fde_elpot_nh3).values
embpot_nh3_dd = embed_eval.get_emb_pot(fde_dens_nh3, fde_dens_h2o, fde_elpot_h2o).values

if 'unittesting' in pyadfenv.options:
    embpot_h2o_dd = np.where(fde_dens_h2o[0].values < 1e-8, 0.0, embpot_h2o_dd)
    embpot_h2o_dd = np.where(fde_dens_nh3[0].values < 1e-8, 0.0, embpot_h2o_dd)

    fde_embpot = np.where(fde_dens_h2o[0].values < 1e-8, 0.0, fde_embpot)
    fde_embpot = np.where(fde_dens_nh3[0].values < 1e-8, 0.0, fde_embpot)

    testobj.assertAlmostEqual(embpot_h2o_dd, fde_embpot, places=6)
