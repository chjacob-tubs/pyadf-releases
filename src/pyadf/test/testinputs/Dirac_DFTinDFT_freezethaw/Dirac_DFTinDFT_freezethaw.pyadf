import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

file_h2o_1 = os.path.join(pyadfenv.outdir, 'FDE-H2O-1.xyz')
file_h2o_2 = os.path.join(pyadfenv.outdir, 'FDE-H2O-2.xyz')
file_mol = os.path.join(pyadfenv.outdir, 'FDE-mol.xyz')

m_h2o_1 = molecule(file_h2o_1)
m_h2o_2 = molecule(file_h2o_2)
m_mol = molecule(file_mol)

m_tot = m_mol + m_h2o_1 + m_h2o_2

print(m_tot.print_coordinates())

# Prepare first water molecule
r_h2o_1 = adfsinglepointjob(m_h2o_1, 'SZ', options=['NOSYMFIT']).run()

# Prepare second water molecule
r_h2o_2 = adfsinglepointjob(m_h2o_2, 'SZ', options=['NOSYMFIT']).run()

fdesettings = adfsettings()
# save TAPE10 is needed for exporting the FDE potential
fdesettings.set_save_tapes([21, 10])
fdesettings.set_functional('BP86')
fdesettings.set_integration(accint=4.0)

frags = [fragment(r_h2o_1, [m_h2o_1], isfrozen=True, fdeoptions={"RELAX": ""}),
         fragment(r_h2o_2, [m_h2o_2], isfrozen=True),
         fragment(None, [m_mol])]

settings = diracsettings(method='DFT', hamiltonian='DC', functional='LDA', properties=['dipole'])

adfoptions = {"basis": "DZP", "settings": fdesettings, "options": ['NOSYM'], "fde": {'RELAXCYCLES': 2}}
diracoptions = {"basis": "cc-pVDZ", "settings": settings}

dftindft_res = wftindftjob(frags, adfoptions, diracoptions).run()

dipole_vect = dftindft_res.get_dipole_vector()
print("Dipole moment for FDE water molecule (Dirac): ", dipole_vect)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(dipole_vect, [0.00000000, 0.00126345, 0.839140561], 4)
