import os
from pyadf import *

if 'pyadfenv' not in globals():
    from pyadf.Initialization import *


def check_results_hf(energ, dip_vect, dip_magn):
    testobj.assertAlmostEqual(energ, -76.021573326, 6)

    testobj.assertAlmostEqual(dip_magn, 0.802843014, 5)
    testobj.assertAlmostEqual(dip_vect[0], 0.778187, 4)
    testobj.assertAlmostEqual(dip_vect[1], 0.180580, 4)
    testobj.assertAlmostEqual(dip_vect[2], -0.079749, 4)


def check_results_lda(energ, dip_vect, dip_magn):
    testobj.assertAlmostEqual(energ, -75.853883446, 6)

    testobj.assertAlmostEqual(dip_magn, 0.75526798, 5)
    testobj.assertAlmostEqual(dip_vect[0], 0.732089, 4)
    testobj.assertAlmostEqual(dip_vect[1], 0.17012, 4)
    testobj.assertAlmostEqual(dip_vect[2], -0.074874, 4)


def check_results_bp86(energ, dip_vect, dip_magn):
    testobj.assertAlmostEqual(energ, -76.4238262499, 6)

    testobj.assertAlmostEqual(dip_magn, 0.7257018, 5)
    testobj.assertAlmostEqual(dip_vect[0], 0.703354, 4)
    testobj.assertAlmostEqual(dip_vect[1], 0.163654, 4)
    testobj.assertAlmostEqual(dip_vect[2], -0.071813, 4)


h2o = molecule(os.path.join(pyadfenv.outdir, 'H2O.xyz'))

# HF single point calculation

settings = TurbomoleSinglePointSettings(verbose_level=5)
settings.set_basis_set('cc-pVDZ')
settings.set_ri(False)
settings.set_scfconv(8)

results = TurbomoleSinglePointJob(h2o, method='hf', settings=settings).run()

energy = results.get_energy()
dipole_vect = results.get_dipole_vector()
dipole_magn = results.get_dipole_magnitude()

check_results_hf(energy, dipole_vect, dipole_magn)

# LDA single point calculation

settings = TurbomoleSinglePointSettings(verbose_level=5)
settings.set_basis_set('cc-pVDZ')
settings.set_dft_functional('s-vwn')
settings.set_ri(False)
settings.set_scfconv(8)
settings.set_dft_grid('m4')

results = TurbomoleSinglePointJob(h2o, method='dft', settings=settings).run()

energy = results.get_energy()
dipole_vect = results.get_dipole_vector()
dipole_magn = results.get_dipole_magnitude()

check_results_lda(energy, dipole_vect, dipole_magn)

# BP86 single point calculation

settings = TurbomoleSinglePointSettings(verbose_level=5)
settings.set_basis_set('cc-pVDZ')
settings.set_dft_functional('b-p')
settings.set_ri(False)
settings.set_scfconv(8)
settings.set_dft_grid('m4')

results = TurbomoleSinglePointJob(h2o, method='dft', settings=settings).run()

energy = results.get_energy()
dipole_vect = results.get_dipole_vector()
dipole_magn = results.get_dipole_magnitude()

check_results_bp86(energy, dipole_vect, dipole_magn)
