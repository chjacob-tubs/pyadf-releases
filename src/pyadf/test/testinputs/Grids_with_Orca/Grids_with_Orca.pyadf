import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

######################################################################
#
# PyADF test Grids with Orca
#
# Different grids are employed for calculations done with results as
# acquired from Orca
#
######################################################################
import numpy as np
import xcfun

m_h2o = molecule(os.path.join(pyadfenv.outdir, 'H2O.xyz'))
m_h2o.set_symmetry('NOSYM')

#########################################
# A) PySCF default Grid
#########################################

settings = OrcaSettings(method='HF', basis='cc-pVDZ')
r_h2o = OrcaSinglePointJob(m_h2o, settings=settings).run()

# PySCF default grid
pgrid = pyscfgrid(r_h2o.get_molecule())
dens_pgrid = r_h2o.get_density(grid=pgrid)

int_dens_pgrid = dens_pgrid.integral()
print("Integral of density (pyscf grid): ", int_dens_pgrid)
print("Number of points: ", pgrid.get_number_of_points())

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens_pgrid, 10, 5)
    testobj.assertAlmostEqual(pgrid.get_number_of_points(), 34312, -1)

#########################################
# B) PySCF lvl 3 Grid
#########################################
# after testing: standard level is currently 3 out of 10

pgrid_lvl = pyscfgrid(r_h2o.get_molecule(), level=3)
dens_pgrid_lvl = r_h2o.get_density(grid=pgrid_lvl)

int_dens_pgrid_lvl = dens_pgrid_lvl.integral()
print("Integral of density (pyscf lvl 3 grid): ", int_dens_pgrid_lvl)
print("Number of points: ", pgrid_lvl.get_number_of_points())

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens_pgrid_lvl, 10, 5)
    testobj.assertEqual(int_dens_pgrid, int_dens_pgrid_lvl)
    testobj.assertEqual(pgrid_lvl.get_number_of_points(), pgrid.get_number_of_points())

#########################################
# C) PySCF lvl 4 Grid
#########################################

pgrid_lvl = pyscfgrid(r_h2o.get_molecule(), level=4)
dens_pgrid_lvl = r_h2o.get_density(grid=pgrid_lvl)

int_dens_pgrid_lvl = dens_pgrid_lvl.integral()
print("Integral of density (pyscf lvl 4 grid): ", int_dens_pgrid_lvl)
print("Number of points: ", pgrid_lvl.get_number_of_points())

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens_pgrid_lvl, 10, 5)
    testobj.assertNotEqual(int_dens_pgrid, int_dens_pgrid_lvl)
    testobj.assertAlmostEqual(pgrid_lvl.get_number_of_points(), 60830, -1)

#########################################
# D) PySCF lvl 2 Grid
#########################################

pgrid_lvl = pyscfgrid(r_h2o.get_molecule(), level=2)
dens_pgrid_lvl = r_h2o.get_density(grid=pgrid_lvl)

int_dens_pgrid_lvl = dens_pgrid_lvl.integral()
print("Integral of density (pyscf lvl 2 grid): ", int_dens_pgrid_lvl)
print("Number of points: ", pgrid_lvl.get_number_of_points())

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens_pgrid_lvl, 10, 5)
    testobj.assertNotEqual(int_dens_pgrid, int_dens_pgrid_lvl)
    testobj.assertAlmostEqual(pgrid_lvl.get_number_of_points(), 22328, -1) # roughly equivalent to ADF in number of points

#########################################
# E) Cube Grid
#########################################

cgrid = cubegrid(r_h2o.get_molecule(), spacing=0.1)
dens_cube = r_h2o.get_density(grid=cgrid)

int_dens_cube = dens_cube.integral()
print("Integral of density (cube grid): ", int_dens_cube)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens_cube, 9.839722, 4)
    testobj.assertAlmostEqual(cgrid.get_number_of_points(), 21756, -1) # alsor roughly equivalent

#########################################
# F) ADF Grid (old standard)
#########################################
# Uses Treutler, just like default for PySCF
# different pruning
# https://onlinelibrary.wiley.com/doi/10.1002/jcc.23323
settings = adfsettings(functional='BLYP', zlmfit=True)
settings.set_integration(4.0, becke='Normal')
settings.set_ncycles(1)  # do not converge SCF, we only need the grid
settings.set_save_tapes([21, 10])

res_adf = adfsinglepointjob(m_h2o, basis='SZ', settings=settings).run()

agrid = adfgrid(res_adf)
dens = r_h2o.get_density(grid=agrid)

int_dens = dens.integral()
print("Integral of density (ADF grid): ", int_dens)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_dens, 10.0, 5)
    testobj.assertAlmostEqual(agrid.get_number_of_points(), 17792, -1)
