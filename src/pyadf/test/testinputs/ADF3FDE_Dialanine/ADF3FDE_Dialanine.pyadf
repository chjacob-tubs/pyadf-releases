import math
import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

supermol = molecule(os.path.join(pyadfenv.outdir, 'dialanine.xyz'))

settings = adfsettings(zlmfit=False)
settings.set_functional('BP86')
settings.set_integration(accint=2.0)
settings.set_save_tapes([21, 10])

supermol_results = adfsinglepointjob(supermol, 'SZ', core='Large', settings=settings, options=['TOTALENERGY']).run()

supermol_dipole = supermol_results.get_dipole_vector()

frags = cappedfragmentlist()
frags.partition_protein(supermol)

mfcc_results = adfmfccjob(frags, 'SZ', core='Large', settings=settings, options=['TOTALENERGY']).run()

mfcc_dipole = mfcc_results.get_dipole_vector()

frags_mfcc = mfcc_results.get_fragmentlist()

fde_results = adf3fdejob(frags_mfcc, 'SZ', core='Large', settings=settings, options=['TOTALENERGY'], 
                         fde={'RHO1FITTED': '', 'CapDensConv': 1e-3}, 
                         fdeoptions={'DENSTYPE': 'SCFfitted'}).run()

fde_dipole = fde_results.get_dipole_vector()

print("Dipole moment: ")
print("    Supermolecule:  ", supermol_dipole)
print("    MFCC:           ", mfcc_dipole)
print("    3-FDE:          ", fde_dipole)

print("Mulliken charges: ")
fde_results.print_mulliken_charges()
print()

supermol_toten = supermol_results.get_total_energy()
mfcc_toten = mfcc_results.get_total_energy()
fde_toten = fde_results.get_total_energy()

print("Total Energies: ")
print("    Supermolecule:  ", supermol_toten)
print("    MFCC:           ", mfcc_toten)
print("    3-FDE:          ", fde_toten)
print()

agrid = adfgrid(supermol_results)

fde_dens = fde_results.get_density(grid=agrid, fit=True)
fde_dens_cub = fde_results.get_density(spacing=0.2, fit=True)
fde_pot = fde_results.get_potential(grid=agrid)

supermol_dens = supermol_results.get_density(grid=agrid, fit=True)
supermol_dens_cub = supermol_results.get_density(grid=fde_dens_cub.grid, fit=True)
supermol_pot = supermol_results.get_potential(grid=agrid)

diff_dens = fde_dens - supermol_dens

diff_dens_cub = fde_dens_cub - supermol_dens_cub
diff_dens_cub.get_cubfile(os.path.join(pyadfenv.outdir, 'diff-dens.cub'))

sqrt_error = math.sqrt(diff_dens.integral(func=lambda x: x * x))
abs_error = diff_dens.integral(func=lambda x: abs(x))

print(" Diff Dens Int        : ", diff_dens.integral())
print(" Diff Dens Int (Sqr.) : ", sqrt_error)
print(" Diff Dens Int (Abs.) : ", abs_error)

testobj.assertAlmostEqual(sqrt_error, 0.00651792, 5)
testobj.assertAlmostEqual(abs_error, 0.07108415, 5)

testobj.assertAlmostEqual([0.56467118, -0.69386790, -0.73352803], supermol_dipole, 4)
testobj.assertAlmostEqual([0.56601593, -0.69271897, -0.71130688], mfcc_dipole, 4)
testobj.assertAlmostEqual([0.58094044, -0.70450021, -0.72448150], fde_dipole, 4)

testobj.assertAlmostEqual(-567.6190256227758, supermol_toten, 4)
testobj.assertAlmostEqual(-567.5191138551868, mfcc_toten, 4)
testobj.assertAlmostEqual(-567.6335621758126, fde_toten, 4)

diff_pot = fde_pot - supermol_pot
pot_error = (diff_pot * supermol_dens).integral(func=lambda x: abs(x))

print(" Diff Pot Error (Abs.) : ", pot_error)
testobj.assertAlmostEqual(pot_error, 0.141973, 5)

# normal FT

frags_mfcc = mfcc_results.get_fragmentlist()
fde_results = adf3fdejob(frags_mfcc, 'SZ', core='Large', settings=settings, options=['TOTALENERGY'], 
                         fde={'RHO1FITTED': '', 'CapDensConv': 1e-3, 'NORMALFT': ''},
                         fdeoptions={'DENSTYPE': 'SCFfitted'}).run()

fde_dipole = fde_results.get_dipole_vector()
fde_dens = fde_results.get_density(grid=agrid, fit=True)

diff_dens = fde_dens - supermol_dens

print("Dipole moment: ")
print("    3-FDE (NormalFT): ", fde_dipole)

fde_toten = fde_results.get_total_energy()

print("Total Energy: ")
print("    3-FDE (NormalFT): ", fde_toten)
print()

sqrt_error = math.sqrt(diff_dens.integral(func=lambda x: x * x))
abs_error = diff_dens.integral(func=lambda x: abs(x))

print(" Diff Dens Int        : ", diff_dens.integral())
print(" Diff Dens Int (Sqr.) : ", sqrt_error)
print(" Diff Dens Int (Abs.) : ", abs_error)

testobj.assertAlmostEqual(sqrt_error, 0.0062879, 5)
testobj.assertAlmostEqual(abs_error, 0.0651071, 5)
testobj.assertAlmostEqual([0.58296498, -0.70185472, -0.70691394], fde_dipole, 4)

testobj.assertAlmostEqual(-567.6333384101636, fde_toten, 4)

# mixed FT

frags_mfcc = mfcc_results.get_fragmentlist()
frags_mfcc.frags[0].add_fdeoption('n3fde', 1)
frags_mfcc.frags[1].add_fdeoption('n3fde', 0)
fde_results = adf3fdejob(frags_mfcc, 'SZ', core='Large', settings=settings, options=['TOTALENERGY'], 
                         fde={'RHO1FITTED': '', 'CapDensConv': 1e-3, 'MIXEDFT': ''},
                         fdeoptions={'DENSTYPE': 'SCFfitted'}).run()

fde_dipole = fde_results.get_dipole_vector()
fde_dens = fde_results.get_density(grid=agrid, fit=True)

diff_dens = fde_dens - supermol_dens

print("Dipole moment: ")
print("    3-FDE (MixedFT): ", fde_dipole)

fde_toten = fde_results.get_total_energy()

print("Total Energy: ")
print("    3-FDE (MixedFT): ", fde_toten)
print()

sqrt_error = math.sqrt(diff_dens.integral(func=lambda x: x * x))
abs_error = diff_dens.integral(func=lambda x: abs(x))

print(" Diff Dens Int        : ", diff_dens.integral())
print(" Diff Dens Int (Sqr.) : ", sqrt_error)
print(" Diff Dens Int (Abs.) : ", abs_error)

testobj.assertAlmostEqual(sqrt_error, 0.00506578, 5)
testobj.assertAlmostEqual(abs_error, 0.05195744, 5)
testobj.assertAlmostEqual([0.5713133, -0.69835467, -0.75275672], fde_dipole, 4)

testobj.assertAlmostEqual(-567.5020912868794, fde_toten, 4)
