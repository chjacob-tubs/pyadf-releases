import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

max_order = 3

# read coordinates of (H2O)5 cluster
mol_tot = molecule(os.path.join(pyadfenv.outdir, 'h2o_5.xyz'))

# generate list of monomer fragments
mol_list = mol_tot.separate()

# conversion factor from Hartree to kJ/mol
kJmol = conversion('Hartree', 'kJ/mol')

# generate a grid from the total molecule
grid = pyscfgrid(mol_tot)

# noinspection PyUnusedLocal
def calculate_mol(mol, frozen_mols=None, savetape10=False):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    settings = OrcaSettings(method='DFT', ri=False)
    settings.set_functional('PBE')
    settings.set_basis('def2-SV(P)')
    res = OrcaSinglePointJob(mol, settings=settings).run()
    return res

# perform calculation of the supermolecule as reference
res_supermol = calculate_mol(mol_tot)
toten_supermol = res_supermol.get_total_energy()

print("Total energy supermolecule (Hartree): ", toten_supermol)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(toten_supermol, -381.104104914415, 6)

###############################################
# A) energy-based MBE
###############################################

# perform MBE calculations (up to third order)
mbejob = MBEJob(mol_list, calculate_mol, order=max_order)
mberes = mbejob.run()

tot_energy_eb = mberes.get_total_energy()
tot_energy_monomers = mberes.get_total_energy(order=1)
int_energy_eb = mberes.get_interaction_energy()

print("Total energy eb-MBE-3 (Hartree)       : ", tot_energy_eb)
print("Total energy monomers (Hartree)       : ", tot_energy_monomers)
print("Interaction energy eb-MBE-3 (Hartree) : ", int_energy_eb)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb, -381.10401717534205, 6)
    testobj.assertAlmostEqual(tot_energy_monomers, -381.053838294172, 6)
    testobj.assertAlmostEqual(int_energy_eb, -0.05017888117002656, 6)

tot_energy_eb_by_order = mberes.get_total_energies_by_order()

print("Total energy eb-MBE-1 (Hartree)       : ", tot_energy_eb_by_order[0])
print("Total energy eb-MBE-2 (Hartree)       : ", tot_energy_eb_by_order[1])
print("Total energy eb-MBE-3 (Hartree)       : ", tot_energy_eb_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_eb_by_order[0], -381.053838294172, 6)
    testobj.assertAlmostEqual(tot_energy_eb_by_order[1], -381.10318706184097, 6)
    testobj.assertAlmostEqual(tot_energy_eb_by_order[2], -381.10401717534205, 6)

int_energy_eb_by_order = mberes.get_interaction_energies_by_order()

print("Interaction energy eb-MBE, 1st order contribution (kJ/mol) : ", int_energy_eb_by_order[0])
print("Interaction energy eb-MBE, 2nd order contribution (kJ/mol) : ", int_energy_eb_by_order[1])
print("Interaction energy eb-MBE, 3rd order contribution (kJ/mol) : ", int_energy_eb_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_energy_eb_by_order[0], 0.0, 6)
    testobj.assertAlmostEqual(int_energy_eb_by_order[1], -0.04934876766895968, 6)
    testobj.assertAlmostEqual(int_energy_eb_by_order[2], -0.05017888117002656, 6)

int_energy_supermol = (toten_supermol - tot_energy_monomers)

error_eb_1 = (int_energy_eb_by_order[0] - int_energy_supermol) * kJmol
error_eb_2 = (int_energy_eb_by_order[1] - int_energy_supermol) * kJmol
error_eb_3 = (int_energy_eb_by_order[2] - int_energy_supermol) * kJmol

print("Error compared to supermol, eb-MBE-1 (kJ/mol): ", error_eb_1)
print("Error compared to supermol, eb-MBE-2 (kJ/mol): ", error_eb_2)
print("Error compared to supermol, eb-MBE-3 (kJ/mol): ", error_eb_3)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_eb_1, 131.97499332588617, 4)
    testobj.assertAlmostEqual(error_eb_2,  2.4098216022588734, 4)
    testobj.assertAlmostEqual(error_eb_3,  0.23035890448045504, 4)

###############################################
# B) density-based MBE
###############################################


dbmbe_job = DensityBasedMBEJob(mberes, grid=grid, nadxc=None, nadkin=None)
dbmbe_res = dbmbe_job.run()

tot_energy_db = dbmbe_res.get_total_energy()
int_energy_db = dbmbe_res.get_interaction_energy()

print("Total energy db-MBE-3 (Hartree)       : ", tot_energy_db)
print("Interaction energy db-MBE-3 (Hartree) : ", int_energy_db)
print()

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db, -381.1035545383967, 6)
    testobj.assertAlmostEqual(int_energy_db, -0.049716244224669026, 6)

tot_energy_db_by_order = dbmbe_res.get_total_energies_by_order()

print("Total energy db-MBE-1 (Hartree)       : ", tot_energy_db_by_order[0])
print("Total energy db-MBE-2 (Hartree)       : ", tot_energy_db_by_order[1])
print("Total energy db-MBE-3 (Hartree)       : ", tot_energy_db_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(tot_energy_db_by_order[0], -381.08051419458116, 6)
    testobj.assertAlmostEqual(tot_energy_db_by_order[1], -381.10520406384023, 6)
    testobj.assertAlmostEqual(tot_energy_db_by_order[2], -381.1035545383967, 6)

int_energy_db_by_order = dbmbe_res.get_interaction_energies_by_order()

print("Interaction energy db-MBE, 1st order contribution (kJ/mol) : ", int_energy_db_by_order[0])
print("Interaction energy db-MBE, 2nd order contribution (kJ/mol) : ", int_energy_db_by_order[1])
print("Interaction energy db-MBE, 3rd order contribution (kJ/mol) : ", int_energy_db_by_order[2])

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(int_energy_db_by_order[0], -0.02667590040914547, 6)
    testobj.assertAlmostEqual(int_energy_db_by_order[1], -0.05136576966822304, 6)
    testobj.assertAlmostEqual(int_energy_db_by_order[2], -0.049716244224669026, 6)

error_db_1 = (int_energy_db_by_order[0] - int_energy_supermol) * kJmol
error_db_2 = (int_energy_db_by_order[1] - int_energy_supermol) * kJmol
error_db_3 = (int_energy_db_by_order[2] - int_energy_supermol) * kJmol

print("Error compared to supermol, db-MBE-1 (kJ/mol): ", error_db_1)
print("Error compared to supermol, db-MBE-2 (kJ/mol): ", error_db_2)
print("Error compared to supermol, db-MBE-3 (kJ/mol): ", error_db_3)

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(error_db_1, 61.93742641887502, 4)
    testobj.assertAlmostEqual(error_db_2, -2.8858164196371576, 4)
    testobj.assertAlmostEqual(error_db_3, 1.4450120377266997, 4)
