######################################################################
#
# PyADF test NWCHEM DBMBE HF
#
######################################################################
import os
from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

max_order = 3


# read coordinates of OH(H2O)2 cluster
mol_tot = molecule(os.path.join(pyadfenv.outdir, 'OH_H2O_2.xyz'))
mol_tot.set_charge(-1)
mol_list = [molecule(os.path.join(pyadfenv.outdir, 'OH.xyz')),
            molecule(os.path.join(pyadfenv.outdir, 'H2O_1.xyz')),
            molecule(os.path.join(pyadfenv.outdir, 'H2O_2.xyz'))]
mol_list[0].set_charge(-1)

# conversion factor from Hartree to kJ/mol
kJmol = conversion('Hartree', 'kJ/mol')

# create a grid
grid = pyscfgrid(mol_tot)

functional = 'PBE'
nadkin = 'PW91k'

###############################################
# 1) HF with HF density
###############################################

# noinspection PyUnusedLocal
def calculate_mol(mol, frozen_mols=None, savetape10=False):
    """
    This function is passed to MBEJob as an argument.

    It takes a molecule and returns a results object.
    How this is done is completely irrelevant to MBEJob.
    """
    settings = nwchemsettings(method='HF')
    res = nwchemsinglepointjob(mol, 'cc-pVDZ', settings=settings).run()
    return res

###############################################
# A) energy-based MBE
###############################################

# perform MBE calculations (up to third order)
mbejob = MBEJob(mol_list, calculate_mol, order=max_order)
mberes = mbejob.run()

# perform calculation of the supermolecule as reference
res_supermol = calculate_mol(mol_tot, savetape10=True)
toten_supermol = res_supermol.get_total_energy()

tot_energy_eb = mberes.get_total_energy()
tot_energy_monomers = mberes.get_total_energy(order=1)
int_energy_supermol = (toten_supermol - tot_energy_monomers)
int_energy_eb = mberes.get_interaction_energy()

tot_energy_eb_by_order = mberes.get_total_energies_by_order()

print()
print('HF WITH HF DENSITY')
print('FIRST RESULTS WITH ' + functional + ' AND ' + nadkin)
print("SUPERMOL Total energy (Hartree)", toten_supermol)
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy eb-MBE (Hartree): ", tot_energy_eb_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy eb-MBE (kJ/mol): ", tot_energy_eb_by_order[i] * kJmol)
print()

int_energy_eb_by_order = mberes.get_interaction_energies_by_order()
for i in range(max_order):
    print(str(i+1) + ". Interaction energy eb-MBE (Hartree): ", int_energy_eb_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Interaction energy eb-MBE (kJ/mol): ", int_energy_eb_by_order[i] * kJmol)
print()

for i in range(max_order):
    error_eb = (int_energy_eb_by_order[i] - int_energy_supermol)
    print(str(i+1) + ". Error compared to supermol eb-MBE (Hartree): ", error_eb)
print()

for i in range(max_order):
    error_eb = (int_energy_eb_by_order[i] - int_energy_supermol) * kJmol
    print(str(i+1) + ". Error compared to supermol eb-MBE (kJ/mol): ", error_eb)
print()

if 'unittesting' in pyadfenv.options:
    print(tot_energy_eb_by_order, [-227.25064791557298, -227.34251867151798, -227.3375835865])
    testobj.assertAlmostEqual(tot_energy_eb_by_order,
                              [-227.37010610198803, -227.50025414306003, -227.48532704693204], 6)
    print(int_energy_eb_by_order, [0, -0.09187075594499561, -0.08693567092699084])
    testobj.assertAlmostEqual(int_energy_eb_by_order,
                              [0, -0.13014804107200462, -0.11522094494401358], 6)
    print(int_energy_supermol, -0.08693567092700505)
    testobj.assertAlmostEqual(int_energy_supermol, -0.11522094494398516, 6)

###############################################
# B) density-based MBE
###############################################

dbmbe_job = DensityBasedMBEJob(mberes, grid=grid, nadxc=functional, nadkin=nadkin)
dbmbe_res = dbmbe_job.run()
tot_energy_db = dbmbe_res.get_total_energy()
int_energy_db = dbmbe_res.get_interaction_energy()

tot_energy_db_by_order = dbmbe_res.get_total_energies_by_order()

print()
print('HF WITH HF DENSITY')
print('NEW RESULTS WITH ' + functional + ' AND ' + nadkin)
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy db-MBE (Hartree): ", tot_energy_db_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Total energy db-MBE (kJ/mol): ", tot_energy_db_by_order[i] * kJmol)
print()

int_energy_db_by_order = dbmbe_res.get_interaction_energies_by_order()
for i in range(max_order):
    print(str(i+1) + ". Interaction energy db-MBE (Hartree): ", int_energy_db_by_order[i])
print()

for i in range(max_order):
    print(str(i+1) + ". Interaction energy db-MBE (kJ/mol): ", int_energy_db_by_order[i] * kJmol)
print()

for i in range(max_order):
    error_db = (int_energy_db_by_order[i] - int_energy_supermol)
    print(str(i+1) + ". Error compared to supermol db-MBE (Hartree): ", error_db)
print()

for i in range(max_order):
    error_db = (int_energy_db_by_order[i] - int_energy_supermol) * kJmol
    print(str(i+1) + ". Error compared to supermol db-MBE (kJ/mol): ", error_db)
print()

for i in range(max_order):
    print(str(i+1) + ". Density Correction (Hartree): ", dbmbe_res.get_dbcorr(i+1))
print()

for i in range(max_order):
    print(str(i+1) + ". Density Correction (kJ/mol): ", (dbmbe_res.get_dbcorr(i+1) * kJmol))

dens_by_order = dbmbe_res._dens_by_order

if 'unittesting' in pyadfenv.options:
    testobj.assertAlmostEqual(dens_by_order[0].integral(), 30.0, 5)
    testobj.assertAlmostEqual(tot_energy_db_by_order,
                              [-227.4351579406442, -227.48342540062657, -227.4853276598466], 6)
    testobj.assertAlmostEqual(int_energy_db_by_order,
                              [-0.06505183863717434, -0.11331929861955814, -0.11522155785948485], 6)
    testobj.assertAlmostEqual(int_energy_supermol, -0.11522094494398516, 6)
